
GPIO_InfiniteLedToggling_Init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004924  08004924  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800492c  0800492c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08004940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004940  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017da5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd3  00000000  00000000  00037dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  0003be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f46a  00000000  00000000  0003d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d0d  00000000  00000000  0005c552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6746  00000000  00000000  0007525f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b9a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047dc  00000000  00000000  0013b9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800489c 	.word	0x0800489c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800489c 	.word	0x0800489c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <ClearBuffers>:
 * @brief  Clear the buffers
 * @param  None
 * @retval None
 */
void ClearBuffers(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  uint8_t count;
  for(count=0;count<BUFFER_SIZE;count++)
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	e00e      	b.n	8000648 <ClearBuffers+0x2c>
  {
    bridge_IN_buffer[count]=0x0;
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4a0b      	ldr	r2, [pc, #44]	; (800065c <ClearBuffers+0x40>)
 8000630:	2100      	movs	r1, #0
 8000632:	54d1      	strb	r1, [r2, r3]
    bridge_OUT_buffer[count]=0x0;
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4a09      	ldr	r2, [pc, #36]	; (8000660 <ClearBuffers+0x44>)
 800063a:	2100      	movs	r1, #0
 800063c:	54d1      	strb	r1, [r2, r3]
  for(count=0;count<BUFFER_SIZE;count++)
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	3201      	adds	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b3f      	cmp	r3, #63	; 0x3f
 800064e:	d9ec      	bls.n	800062a <ClearBuffers+0xe>
  }
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	20000028 	.word	0x20000028
 8000660:	20000068 	.word	0x20000068

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f001 f9c4 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f004 f8d7 	bl	8004844 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000696:	f000 f96d 	bl	8000974 <main>

0800069a <LoopForever>:

LoopForever:
  b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a8:	08004934 	.word	0x08004934
  ldr r2, =_sbss
 80006ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b0:	20000270 	.word	0x20000270

080006b4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_COMP_IRQHandler>
	...

080006b8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <LL_RCC_HSI_Enable+0x18>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <LL_RCC_HSI_Enable+0x18>)
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	0049      	lsls	r1, r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <LL_RCC_HSI_IsReady+0x24>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	401a      	ands	r2, r3
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d101      	bne.n	80006ee <LL_RCC_HSI_IsReady+0x1a>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <LL_RCC_HSI_IsReady+0x1c>
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LL_RCC_SetSysClkSource+0x24>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	2207      	movs	r2, #7
 800070a:	4393      	bics	r3, r2
 800070c:	0019      	movs	r1, r3
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <LL_RCC_SetSysClkSource+0x24>)
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	430a      	orrs	r2, r1
 8000714:	609a      	str	r2, [r3, #8]
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000

08000724 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <LL_RCC_GetSysClkSource+0x14>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	4013      	ands	r3, r2
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000

0800073c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <LL_RCC_SetAHBPrescaler+0x24>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <LL_RCC_SetAHBPrescaler+0x28>)
 800074a:	4013      	ands	r3, r2
 800074c:	0019      	movs	r1, r3
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <LL_RCC_SetAHBPrescaler+0x24>)
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	430a      	orrs	r2, r1
 8000754:	609a      	str	r2, [r3, #8]
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40021000 	.word	0x40021000
 8000764:	fffff0ff 	.word	0xfffff0ff

08000768 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000776:	4013      	ands	r3, r2
 8000778:	0019      	movs	r1, r3
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <LL_RCC_SetAPB1Prescaler+0x24>)
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	430a      	orrs	r2, r1
 8000780:	609a      	str	r2, [r3, #8]
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40021000 	.word	0x40021000
 8000790:	ffff8fff 	.word	0xffff8fff

08000794 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <LL_RCC_PLL_Enable+0x18>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <LL_RCC_PLL_Enable+0x18>)
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	0449      	lsls	r1, r1, #17
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000

080007b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <LL_RCC_PLL_IsReady+0x24>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	049b      	lsls	r3, r3, #18
 80007bc:	401a      	ands	r2, r3
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	049b      	lsls	r3, r3, #18
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d101      	bne.n	80007ca <LL_RCC_PLL_IsReady+0x1a>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <LL_RCC_PLL_IsReady+0x1c>
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	0019      	movs	r1, r3
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	431a      	orrs	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	431a      	orrs	r2, r3
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	431a      	orrs	r2, r3
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000802:	430a      	orrs	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021000 	.word	0x40021000
 8000814:	1fff808c 	.word	0x1fff808c

08000818 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000822:	2180      	movs	r1, #128	; 0x80
 8000824:	0549      	lsls	r1, r1, #21
 8000826:	430a      	orrs	r2, r1
 8000828:	60da      	str	r2, [r3, #12]
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <LL_IOP_GRP1_EnableClock+0x28>)
 800083e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <LL_IOP_GRP1_EnableClock+0x28>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	430a      	orrs	r2, r1
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <LL_IOP_GRP1_EnableClock+0x28>)
 800084a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b004      	add	sp, #16
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000

08000860 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <LL_FLASH_SetLatency+0x24>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2207      	movs	r2, #7
 800086e:	4393      	bics	r3, r2
 8000870:	0019      	movs	r1, r3
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <LL_FLASH_SetLatency+0x24>)
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	430a      	orrs	r2, r1
 8000878:	601a      	str	r2, [r3, #0]
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40022000 	.word	0x40022000

08000888 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <LL_FLASH_GetLatency+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2207      	movs	r2, #7
 8000892:	4013      	ands	r3, r2
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40022000 	.word	0x40022000

080008a0 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <LL_EXTI_SetEXTISource+0x48>)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2103      	movs	r1, #3
 80008b0:	400b      	ands	r3, r1
 80008b2:	3318      	adds	r3, #24
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	589b      	ldr	r3, [r3, r2]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	0c12      	lsrs	r2, r2, #16
 80008bc:	2107      	movs	r1, #7
 80008be:	4091      	lsls	r1, r2
 80008c0:	000a      	movs	r2, r1
 80008c2:	43d2      	mvns	r2, r2
 80008c4:	401a      	ands	r2, r3
 80008c6:	0011      	movs	r1, r2
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	409a      	lsls	r2, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <LL_EXTI_SetEXTISource+0x48>)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	2403      	movs	r4, #3
 80008d6:	4023      	ands	r3, r4
 80008d8:	430a      	orrs	r2, r1
 80008da:	3318      	adds	r3, #24
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	501a      	str	r2, [r3, r0]
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b003      	add	sp, #12
 80008e6:	bd90      	pop	{r4, r7, pc}
 80008e8:	40021800 	.word	0x40021800

080008ec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	435b      	muls	r3, r3
 8000900:	001a      	movs	r2, r3
 8000902:	0013      	movs	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	189b      	adds	r3, r3, r2
 8000908:	43db      	mvns	r3, r3
 800090a:	400b      	ands	r3, r1
 800090c:	001a      	movs	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	435b      	muls	r3, r3
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	434b      	muls	r3, r1
 8000916:	431a      	orrs	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b004      	add	sp, #16
 8000922:	bd80      	pop	{r7, pc}

08000924 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68d9      	ldr	r1, [r3, #12]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	435b      	muls	r3, r3
 8000938:	001a      	movs	r2, r3
 800093a:	0013      	movs	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	189b      	adds	r3, r3, r2
 8000940:	43db      	mvns	r3, r3
 8000942:	400b      	ands	r3, r1
 8000944:	001a      	movs	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	435b      	muls	r3, r3
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	434b      	muls	r3, r1
 800094e:	431a      	orrs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	60da      	str	r2, [r3, #12]
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}

0800095c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}

08000974 <main>:
		      HAL_Delay(300);
		    }
}

int main(void)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b087      	sub	sp, #28
 8000978:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f001 f847 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f8a9 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 fa23 	bl	8000dcc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000986:	f000 f929 	bl	8000bdc <MX_TIM2_Init>
  MX_TIM3_Init();
 800098a:	f000 f97b 	bl	8000c84 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800098e:	f000 f9cf 	bl	8000d30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_SR_UIF);
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <main+0x13c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2202      	movs	r2, #2
 8000998:	4252      	negs	r2, r2
 800099a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT(&htim3,TIM_SR_UIF);
 800099c:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <main+0x140>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2202      	movs	r2, #2
 80009a2:	4252      	negs	r2, r2
 80009a4:	611a      	str	r2, [r3, #16]

	  /*Wait Time assuring a properly steady state condition */
  HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	; 0x64
 80009a8:	f001 f8b6 	bl	8001b18 <HAL_Delay>

  interface_mode = UART_MODE;	/*Set a known condition */
 80009ac:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <main+0x144>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]

	  /*Clear Buffer*/
  ClearBuffers();
 80009b2:	f7ff fe33 	bl	800061c <ClearBuffers>

	  /*LED12A1 Initialization*/
  LED12A1_Init();
 80009b6:	f000 fdb5 	bl	8001524 <LED12A1_Init>

  int test = 69;
 80009ba:	2345      	movs	r3, #69	; 0x45
 80009bc:	60bb      	str	r3, [r7, #8]

  if (LED1202Obj.IsInitialized == NULL)
 80009be:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <main+0x148>)
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <main+0x56>
	  test = 70;
 80009c6:	2346      	movs	r3, #70	; 0x46
 80009c8:	60bb      	str	r3, [r7, #8]

	  /*Scan for Number of available LED1202 ICs*/
  NumOfDev =  LED12A1_ScanAvailDevice( &LED1202Obj ,DevAddrArray);
 80009ca:	4a3d      	ldr	r2, [pc, #244]	; (8000ac0 <main+0x14c>)
 80009cc:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <main+0x148>)
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 ff25 	bl	8001820 <LED12A1_ScanAvailDevice>
 80009d6:	0003      	movs	r3, r0
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <main+0x150>)
 80009dc:	701a      	strb	r2, [r3, #0]
#ifdef GUI_MODE
  	  HAL_UART_Receive_IT(&huart2,&bridge_OUT_buffer[0],64);
#else
	  /*Enable available LED1202 ICs*/
  test = 71;
 80009de:	2347      	movs	r3, #71	; 0x47
 80009e0:	60bb      	str	r3, [r7, #8]
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 80009e2:	230f      	movs	r3, #15
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	e014      	b.n	8000a16 <main+0xa2>
  {
	  LED12A1_DeviceEnable(&LED1202Obj , (TypedefEnumDevAddr)(LED_DEVICE1 + dev));
 80009ec:	240f      	movs	r4, #15
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <main+0x148>)
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fe88 	bl	800170c <LED12A1_DeviceEnable>
	  LED12A1_ChannelDisable( &LED1202Obj , LED_CHANNEL_ALL , (TypedefEnumDevAddr)( LED_DEVICE1 + dev));
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4931      	ldr	r1, [pc, #196]	; (8000ac8 <main+0x154>)
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <main+0x148>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 ffce 	bl	80019a6 <LED12A1_ChannelDisable>
  for (uint8_t dev = 0;dev<NumOfDev;dev++)
 8000a0a:	0021      	movs	r1, r4
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	3201      	adds	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <main+0x150>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	18ba      	adds	r2, r7, r2
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3e3      	bcc.n	80009ec <main+0x78>
	#ifdef GUI_MODE
	  WaitForCommand();
	#else

	//testLights();
	  for (dev = 0;dev<NumOfDev;dev++)
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <main+0x158>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e039      	b.n	8000aa0 <main+0x12c>
	  {
		  uint8_t channel = 3;
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	2203      	movs	r2, #3
 8000a30:	701a      	strb	r2, [r3, #0]
		  //for (uint8_t channel = 0;channel<=11;channel++)
		  //{
				digCurrReg =  4095;
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <main+0x15c>)
 8000a34:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <main+0x154>)
 8000a36:	801a      	strh	r2, [r3, #0]
				LED12A1_ChannelEnable( &LED1202Obj , (TypeDefChannel)(LED_CHANNEL_0<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	b299      	uxth	r1, r3
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <main+0x158>)
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <main+0x148>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 ff84 	bl	8001958 <LED12A1_ChannelEnable>
				LED12A1_AnalogDimming( &LED1202Obj , MAX_CH_CURRENT/20, channel,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <main+0x158>)
 8000a52:	7819      	ldrb	r1, [r3, #0]
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <main+0x148>)
 8000a5a:	000b      	movs	r3, r1
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	f000 ff24 	bl	80018aa <LED12A1_AnalogDimming>
				LED12A1_DigitalDimming( &LED1202Obj ,&digCurrReg,channel,0,  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <main+0x158>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	1dfa      	adds	r2, r7, #7
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	4919      	ldr	r1, [pc, #100]	; (8000ad0 <main+0x15c>)
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <main+0x148>)
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2300      	movs	r3, #0
 8000a72:	f000 ff47 	bl	8001904 <LED12A1_DigitalDimming>
				HAL_Delay(200);
 8000a76:	20c8      	movs	r0, #200	; 0xc8
 8000a78:	f001 f84e 	bl	8001b18 <HAL_Delay>
				LED12A1_ChannelDisable( &LED1202Obj , (TypeDefChannel)(LED_CHANNEL_0<<channel),  (TypedefEnumDevAddr)(LED_DEVICE1+dev));
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2201      	movs	r2, #1
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	b299      	uxth	r1, r3
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <main+0x158>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <main+0x148>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 ff89 	bl	80019a6 <LED12A1_ChannelDisable>
	  for (dev = 0;dev<NumOfDev;dev++)
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <main+0x158>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <main+0x158>)
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <main+0x158>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <main+0x150>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3bf      	bcc.n	8000a2c <main+0xb8>
 8000aac:	e7ba      	b.n	8000a24 <main+0xb0>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000100 	.word	0x20000100
 8000ab4:	2000014c 	.word	0x2000014c
 8000ab8:	200000a8 	.word	0x200000a8
 8000abc:	20000240 	.word	0x20000240
 8000ac0:	2000022c 	.word	0x2000022c
 8000ac4:	20000236 	.word	0x20000236
 8000ac8:	00000fff 	.word	0x00000fff
 8000acc:	2000023a 	.word	0x2000023a
 8000ad0:	20000238 	.word	0x20000238

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fec1 	bl	8000860 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	f7ff fed2 	bl	8000888 <LL_FLASH_GetLatency>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d1fa      	bne.n	8000ae0 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000aea:	f7ff fde5 	bl	80006b8 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	f7ff fdf0 	bl	80006d4 <LL_RCC_HSI_IsReady>
 8000af4:	0003      	movs	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d1fa      	bne.n	8000af0 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	059b      	lsls	r3, r3, #22
 8000afe:	2208      	movs	r2, #8
 8000b00:	2100      	movs	r1, #0
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fe68 	bl	80007d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b08:	f7ff fe44 	bl	8000794 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8000b0c:	f7ff fe84 	bl	8000818 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	f7ff fe4d 	bl	80007b0 <LL_RCC_PLL_IsReady>
 8000b16:	0003      	movs	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d1fa      	bne.n	8000b12 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe0d 	bl	800073c <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff fdea 	bl	80006fc <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	f7ff fdfb 	bl	8000724 <LL_RCC_GetSysClkSource>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	2b10      	cmp	r3, #16
 8000b32:	d1fa      	bne.n	8000b2a <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe17 	bl	8000768 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <SystemClock_Config+0x84>)
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f003 fe73 	bl	8004828 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 ff82 	bl	8001a4c <HAL_InitTick>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b4c:	f000 f9cc 	bl	8000ee8 <Error_Handler>
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	03d09000 	.word	0x03d09000

08000b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <MX_I2C1_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b68:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <MX_I2C1_Init+0x7c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 faef 	bl	800217c <HAL_I2C_Init>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 f9a1 	bl	8000ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f002 f8ea 	bl	8002d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f998 	bl	8000ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <MX_I2C1_Init+0x74>)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f002 f92d 	bl	8002e1c <HAL_I2CEx_ConfigDigitalFilter>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 f98f 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000ac 	.word	0x200000ac
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	10707dbc 	.word	0x10707dbc

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	2310      	movs	r3, #16
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	0018      	movs	r0, r3
 8000be8:	2310      	movs	r3, #16
 8000bea:	001a      	movs	r2, r3
 8000bec:	2100      	movs	r1, #0
 8000bee:	f003 fe4d 	bl	800488c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f003 fe46 	bl	800488c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	05d2      	lsls	r2, r2, #23
 8000c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 f9f0 	bl	8003010 <HAL_TIM_Base_Init>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c34:	f000 f958 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	2110      	movs	r1, #16
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0152      	lsls	r2, r2, #5
 8000c40:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c42:	187a      	adds	r2, r7, r1
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 fa39 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c52:	f000 f949 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c62:	1d3a      	adds	r2, r7, #4
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_TIM2_Init+0xa4>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fc25 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c72:	f000 f939 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b008      	add	sp, #32
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000100 	.word	0x20000100

08000c84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2310      	movs	r3, #16
 8000c92:	001a      	movs	r2, r3
 8000c94:	2100      	movs	r1, #0
 8000c96:	f003 fdf9 	bl	800488c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f003 fdf2 	bl	800488c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000caa:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <MX_TIM3_Init+0xa4>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <MX_TIM3_Init+0xa8>)
 8000cbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f002 f99e 	bl	8003010 <HAL_TIM_Base_Init>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f000 f906 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	2110      	movs	r1, #16
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0152      	lsls	r2, r2, #5
 8000ce4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce6:	187a      	adds	r2, r7, r1
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000cea:	0011      	movs	r1, r2
 8000cec:	0018      	movs	r0, r3
 8000cee:	f002 f9e7 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 8000cf2:	1e03      	subs	r3, r0, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cf6:	f000 f8f7 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d06:	1d3a      	adds	r2, r7, #4
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_TIM3_Init+0xa0>)
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f002 fbd3 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d16:	f000 f8e7 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b008      	add	sp, #32
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	2000014c 	.word	0x2000014c
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	0000ffff 	.word	0x0000ffff

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d36:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <MX_USART2_UART_Init+0x98>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d3c:	22e1      	movs	r2, #225	; 0xe1
 8000d3e:	0252      	lsls	r2, r2, #9
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f002 fc12 	bl	80035a4 <HAL_UART_Init>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f8b0 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f003 f9b9 	bl	8004104 <HAL_UARTEx_SetTxFifoThreshold>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d96:	f000 f8a7 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f003 f9f0 	bl	8004184 <HAL_UARTEx_SetRxFifoThreshold>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000da8:	f000 f89e 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x94>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f003 f96e 	bl	8004090 <HAL_UARTEx_DisableFifoMode>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f000 f896 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	20000198 	.word	0x20000198
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000dd2:	241c      	movs	r4, #28
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	230c      	movs	r3, #12
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f003 fd55 	bl	800488c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	0018      	movs	r0, r3
 8000de6:	2318      	movs	r3, #24
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f003 fd4e 	bl	800488c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000df0:	2004      	movs	r0, #4
 8000df2:	f7ff fd1f 	bl	8000834 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8000df6:	2020      	movs	r0, #32
 8000df8:	f7ff fd1c 	bl	8000834 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fd19 	bl	8000834 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fd16 	bl	8000834 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8000e08:	23a0      	movs	r3, #160	; 0xa0
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fda4 	bl	800095c <LL_GPIO_ResetOutputPin>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTC, LL_EXTI_CONFIG_LINE13);
 8000e14:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <MX_GPIO_Init+0x10c>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f7ff fd41 	bl	80008a0 <LL_EXTI_SetEXTISource>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTB, LL_EXTI_CONFIG_LINE6);
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_GPIO_Init+0x110>)
 8000e20:	0019      	movs	r1, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff fd3c 	bl	80008a0 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000e28:	0021      	movs	r1, r4
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0192      	lsls	r2, r2, #6
 8000e30:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2201      	movs	r2, #1
 8000e36:	721a      	strb	r2, [r3, #8]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	725a      	strb	r2, [r3, #9]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2201      	movs	r2, #1
 8000e42:	729a      	strb	r2, [r3, #10]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e44:	000c      	movs	r4, r1
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f003 fb17 	bl	800447c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000e4e:	0021      	movs	r1, r4
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	721a      	strb	r2, [r3, #8]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	725a      	strb	r2, [r3, #9]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2201      	movs	r2, #1
 8000e66:	729a      	strb	r2, [r3, #10]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f003 fb06 	bl	800447c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_13, LL_GPIO_PULL_NO);
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	019b      	lsls	r3, r3, #6
 8000e74:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <MX_GPIO_Init+0x114>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	0019      	movs	r1, r3
 8000e7a:	f7ff fd53 	bl	8000924 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_GPIO_Init+0x118>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff fd4d 	bl	8000924 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_INPUT);
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <MX_GPIO_Init+0x114>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	0019      	movs	r1, r3
 8000e94:	f7ff fd2a 	bl	80008ec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_GPIO_Init+0x118>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2140      	movs	r1, #64	; 0x40
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff fd24 	bl	80008ec <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2201      	movs	r2, #1
 8000eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	1d3a      	adds	r2, r7, #4
 8000ec4:	23a0      	movs	r3, #160	; 0xa0
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	0011      	movs	r1, r2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f003 fc50 	bl	8004770 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b00b      	add	sp, #44	; 0x2c
 8000ed6:	bd90      	pop	{r4, r7, pc}
 8000ed8:	00080003 	.word	0x00080003
 8000edc:	00100001 	.word	0x00100001
 8000ee0:	50000800 	.word	0x50000800
 8000ee4:	50000400 	.word	0x50000400

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <Error_Handler+0x8>
	...

08000ef4 <LL_RCC_SetUSARTClockSource>:
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	0c12      	lsrs	r2, r2, #16
 8000f04:	43d2      	mvns	r2, r2
 8000f06:	401a      	ands	r2, r3
 8000f08:	0011      	movs	r1, r2
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	0c1a      	lsrs	r2, r3, #16
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000f12:	430a      	orrs	r2, r1
 8000f14:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40021000 	.word	0x40021000

08000f24 <LL_RCC_SetI2CClockSource>:
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (I2CxSource >> 16U), (I2CxSource & 0x0000FFFFU));
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <LL_RCC_SetI2CClockSource+0x2c>)
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	0c12      	lsrs	r2, r2, #16
 8000f34:	43d2      	mvns	r2, r2
 8000f36:	401a      	ands	r2, r3
 8000f38:	0011      	movs	r1, r2
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	0c1a      	lsrs	r2, r3, #16
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <LL_RCC_SetI2CClockSource+0x2c>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0549      	lsls	r1, r1, #21
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	055b      	lsls	r3, r3, #21
 8000f88:	4013      	ands	r3, r2
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f8e:	23c0      	movs	r3, #192	; 0xc0
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 fde4 	bl	8001b60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08b      	sub	sp, #44	; 0x2c
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	2414      	movs	r4, #20
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	2314      	movs	r3, #20
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f003 fc68 	bl	800488c <memset>
  if(hi2c->Instance==I2C1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1e      	ldr	r2, [pc, #120]	; (800103c <HAL_I2C_MspInit+0x98>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d135      	bne.n	8001032 <HAL_I2C_MspInit+0x8e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000fc6:	23c0      	movs	r3, #192	; 0xc0
 8000fc8:	059b      	lsls	r3, r3, #22
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff ffaa 	bl	8000f24 <LL_RCC_SetI2CClockSource>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_I2C_MspInit+0x9c>)
 8000fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_I2C_MspInit+0x9c>)
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_I2C_MspInit+0x9c>)
 8000fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	22c0      	movs	r2, #192	; 0xc0
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	0021      	movs	r1, r4
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2212      	movs	r2, #18
 8000ff6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2206      	movs	r2, #6
 8001008:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	187b      	adds	r3, r7, r1
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_I2C_MspInit+0xa0>)
 800100e:	0019      	movs	r1, r3
 8001010:	0010      	movs	r0, r2
 8001012:	f000 fe6f 	bl	8001cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_I2C_MspInit+0x9c>)
 8001018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_I2C_MspInit+0x9c>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0389      	lsls	r1, r1, #14
 8001020:	430a      	orrs	r2, r1
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_I2C_MspInit+0x9c>)
 8001026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	039b      	lsls	r3, r3, #14
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b00b      	add	sp, #44	; 0x2c
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40005400 	.word	0x40005400
 8001040:	40021000 	.word	0x40021000
 8001044:	50000400 	.word	0x50000400

08001048 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_I2C_MspDeInit+0x44>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d113      	bne.n	8001082 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_I2C_MspDeInit+0x48>)
 800105c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_I2C_MspDeInit+0x48>)
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <HAL_I2C_MspDeInit+0x4c>)
 8001062:	400a      	ands	r2, r1
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_I2C_MspDeInit+0x50>)
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f000 ffac 	bl	8001fcc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_I2C_MspDeInit+0x50>)
 800107a:	0019      	movs	r1, r3
 800107c:	0010      	movs	r0, r2
 800107e:	f000 ffa5 	bl	8001fcc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40005400 	.word	0x40005400
 8001090:	40021000 	.word	0x40021000
 8001094:	ffdfffff 	.word	0xffdfffff
 8001098:	50000400 	.word	0x50000400

0800109c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	05db      	lsls	r3, r3, #23
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d10c      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_TIM_Base_MspInit+0x58>)
 80010b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_Base_MspInit+0x58>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_Base_MspInit+0x58>)
 80010be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c0:	2201      	movs	r2, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010c8:	e010      	b.n	80010ec <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_TIM_Base_MspInit+0x5c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d10b      	bne.n	80010ec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <HAL_TIM_Base_MspInit+0x58>)
 80010d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_TIM_Base_MspInit+0x58>)
 80010da:	2102      	movs	r1, #2
 80010dc:	430a      	orrs	r2, r1
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_TIM_Base_MspInit+0x58>)
 80010e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e4:	2202      	movs	r2, #2
 80010e6:	4013      	ands	r3, r2
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b004      	add	sp, #16
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40000400 	.word	0x40000400

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	2414      	movs	r4, #20
 8001106:	193b      	adds	r3, r7, r4
 8001108:	0018      	movs	r0, r3
 800110a:	2314      	movs	r3, #20
 800110c:	001a      	movs	r2, r3
 800110e:	2100      	movs	r1, #0
 8001110:	f003 fbbc 	bl	800488c <memset>
  if(huart->Instance==USART2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_UART_MspInit+0x98>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d135      	bne.n	800118a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	031b      	lsls	r3, r3, #12
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff fee6 	bl	8000ef4 <LL_RCC_SetUSARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_UART_MspInit+0x9c>)
 800112a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_UART_MspInit+0x9c>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	0289      	lsls	r1, r1, #10
 8001132:	430a      	orrs	r2, r1
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_UART_MspInit+0x9c>)
 8001138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x9c>)
 8001146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_UART_MspInit+0x9c>)
 800114a:	2101      	movs	r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0x9c>)
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	2201      	movs	r2, #1
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115c:	0021      	movs	r1, r4
 800115e:	187b      	adds	r3, r7, r1
 8001160:	220c      	movs	r2, #12
 8001162:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2202      	movs	r2, #2
 8001168:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2201      	movs	r2, #1
 800117a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	187a      	adds	r2, r7, r1
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f000 fdb5 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b00b      	add	sp, #44	; 0x2c
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40004400 	.word	0x40004400
 8001198:	40021000 	.word	0x40021000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 fc8c 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <LED1202_RegisterBusIO>:
 * @param  pObj the device pObj
 * @param  pIO the IO pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_RegisterBusIO (LED1202_Object_TypeDef* pObj, LED1202_IO_TypeDef *pIO)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  int32_t ret = (int32_t)LED1202_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <LED1202_RegisterBusIO+0x1a>
  {
    ret = (int32_t)LED1202_ERROR;
 80011e4:	2303      	movs	r3, #3
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e032      	b.n	8001250 <LED1202_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.BusType     = pIO->BusType;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
    pObj->IO.Address     = pIO->Address;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	791a      	ldrb	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	711a      	strb	r2, [r3, #4]
    pObj->IO.Init        = pIO->Init;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]
    pObj->IO.DeInit      = pIO->DeInit;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60da      	str	r2, [r3, #12]
    pObj->IO.Write       = pIO->Write;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
    pObj->IO.Read        = pIO->Read;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	615a      	str	r2, [r3, #20]
    pObj->IO.Delay     =   pIO->Delay;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	699a      	ldr	r2, [r3, #24]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <LED1202_RegisterBusIO+0x8c>)
 8001226:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <LED1202_RegisterBusIO+0x90>)
 800122c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <LED1202_RegisterBusIO+0x72>
    {
      ret = (int32_t)LED1202_ERROR;
 800123c:	2303      	movs	r3, #3
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e006      	b.n	8001250 <LED1202_RegisterBusIO+0x80>
    } else if (pObj->IO.Init() != 0) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4798      	blx	r3
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d001      	beq.n	8001250 <LED1202_RegisterBusIO+0x80>
      ret = (int32_t)LED1202_ERROR;
 800124c:	2303      	movs	r3, #3
 800124e:	60fb      	str	r3, [r7, #12]
    {
      /*DO nothing*/
    }
  }

  return ret;
 8001250:	68fb      	ldr	r3, [r7, #12]
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	08001685 	.word	0x08001685
 8001260:	080016c9 	.word	0x080016c9

08001264 <LED1202_ReadID>:
 * @param  pID pointer to the buffer
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_ReadID(LED1202_Object_TypeDef* pObj, uint8_t *pID, uint8_t DevAddr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	701a      	strb	r2, [r3, #0]
  int32_t ret;
  pObj->IO.Address = DevAddr<<1;
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	18db      	adds	r3, r3, r3
 8001278:	b2da      	uxtb	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	711a      	strb	r2, [r3, #4]
  TmpStatus = LED1202_ReadReg(&(pObj->Ctx), LED1202_DEVICE_ID, pID, 1);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	331c      	adds	r3, #28
 8001282:	0018      	movs	r0, r3
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	2100      	movs	r1, #0
 800128a:	f000 f908 	bl	800149e <LED1202_ReadReg>
 800128e:	0002      	movs	r2, r0
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <LED1202_ReadID+0x4c>)
 8001292:	601a      	str	r2, [r3, #0]
  
  if((*pID) == I_AM_LED1202)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b12      	cmp	r3, #18
 800129a:	d102      	bne.n	80012a2 <LED1202_ReadID+0x3e>
  {
    ret = (int32_t)LED1202_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e001      	b.n	80012a6 <LED1202_ReadID+0x42>
  }
  else
  {
    ret = (int32_t)LED1202_ERROR;
 80012a2:	2303      	movs	r3, #3
 80012a4:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 80012a6:	697b      	ldr	r3, [r7, #20]
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b006      	add	sp, #24
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000023c 	.word	0x2000023c

080012b4 <LED1202_SetChannelState>:
 * @param  Channel LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_SetChannelState( LED1202_Object_TypeDef* pObj , uint16_t Channel ,StateEnum_TypeDef State, uint8_t DevAddr)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	000c      	movs	r4, r1
 80012be:	0010      	movs	r0, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	1c22      	adds	r2, r4, #0
 80012c6:	801a      	strh	r2, [r3, #0]
 80012c8:	1c7b      	adds	r3, r7, #1
 80012ca:	1c02      	adds	r2, r0, #0
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	003b      	movs	r3, r7
 80012d0:	1c0a      	adds	r2, r1, #0
 80012d2:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret;
  uint16_t readReg;
  uint16_t chRegVal;
  pObj->IO.Address = DevAddr<<1;
 80012d4:	003b      	movs	r3, r7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	18db      	adds	r3, r3, r3
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_ReadReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&readReg, 2);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	331c      	adds	r3, #28
 80012e4:	0018      	movs	r0, r3
 80012e6:	240a      	movs	r4, #10
 80012e8:	193a      	adds	r2, r7, r4
 80012ea:	2302      	movs	r3, #2
 80012ec:	2102      	movs	r1, #2
 80012ee:	f000 f8d6 	bl	800149e <LED1202_ReadReg>
 80012f2:	0003      	movs	r3, r0
 80012f4:	60fb      	str	r3, [r7, #12]
    
  if(State == CH_STATE_ENABLE)
 80012f6:	1c7b      	adds	r3, r7, #1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d113      	bne.n	8001326 <LED1202_SetChannelState+0x72>
  {
    chRegVal = readReg | Channel;
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	1cbb      	adds	r3, r7, #2
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	4313      	orrs	r3, r2
 8001308:	b29a      	uxth	r2, r3
 800130a:	2108      	movs	r1, #8
 800130c:	187b      	adds	r3, r7, r1
 800130e:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	331c      	adds	r3, #28
 8001314:	0018      	movs	r0, r3
 8001316:	187a      	adds	r2, r7, r1
 8001318:	2302      	movs	r3, #2
 800131a:	2102      	movs	r1, #2
 800131c:	f000 f8e0 	bl	80014e0 <LED1202_WriteReg>
 8001320:	0003      	movs	r3, r0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e036      	b.n	8001394 <LED1202_SetChannelState+0xe0>
  }
  else if(State == CH_STATE_DISABLE)
 8001326:	1c7b      	adds	r3, r7, #1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d119      	bne.n	8001362 <LED1202_SetChannelState+0xae>
  {
    chRegVal = readReg & (~Channel);  
 800132e:	1cbb      	adds	r3, r7, #2
 8001330:	2200      	movs	r2, #0
 8001332:	5e9b      	ldrsh	r3, [r3, r2]
 8001334:	43db      	mvns	r3, r3
 8001336:	b21b      	sxth	r3, r3
 8001338:	220a      	movs	r2, #10
 800133a:	18ba      	adds	r2, r7, r2
 800133c:	8812      	ldrh	r2, [r2, #0]
 800133e:	b212      	sxth	r2, r2
 8001340:	4013      	ands	r3, r2
 8001342:	b21b      	sxth	r3, r3
 8001344:	b29a      	uxth	r2, r3
 8001346:	2108      	movs	r1, #8
 8001348:	187b      	adds	r3, r7, r1
 800134a:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	331c      	adds	r3, #28
 8001350:	0018      	movs	r0, r3
 8001352:	187a      	adds	r2, r7, r1
 8001354:	2302      	movs	r3, #2
 8001356:	2102      	movs	r1, #2
 8001358:	f000 f8c2 	bl	80014e0 <LED1202_WriteReg>
 800135c:	0003      	movs	r3, r0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e018      	b.n	8001394 <LED1202_SetChannelState+0xe0>
  }
  else
  {
    chRegVal = readReg & (~Channel);
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	2200      	movs	r2, #0
 8001366:	5e9b      	ldrsh	r3, [r3, r2]
 8001368:	43db      	mvns	r3, r3
 800136a:	b21b      	sxth	r3, r3
 800136c:	220a      	movs	r2, #10
 800136e:	18ba      	adds	r2, r7, r2
 8001370:	8812      	ldrh	r2, [r2, #0]
 8001372:	b212      	sxth	r2, r2
 8001374:	4013      	ands	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	b29a      	uxth	r2, r3
 800137a:	2108      	movs	r1, #8
 800137c:	187b      	adds	r3, r7, r1
 800137e:	801a      	strh	r2, [r3, #0]
    ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_LED_CH_ENABLE, (uint8_t *)&chRegVal, 2);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	331c      	adds	r3, #28
 8001384:	0018      	movs	r0, r3
 8001386:	187a      	adds	r2, r7, r1
 8001388:	2302      	movs	r3, #2
 800138a:	2102      	movs	r1, #2
 800138c:	f000 f8a8 	bl	80014e0 <LED1202_WriteReg>
 8001390:	0003      	movs	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]
  }
  return(ret);
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b005      	add	sp, #20
 800139c:	bd90      	pop	{r4, r7, pc}

0800139e <LED1202_WriteLEDCurrentReg>:
 * @param  Channel Channel number (0 to 11)
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_WriteLEDCurrentReg( LED1202_Object_TypeDef* pObj , uint8_t Current, uint16_t Channel, uint8_t DevAddr)
{
 800139e:	b590      	push	{r4, r7, lr}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	000c      	movs	r4, r1
 80013a8:	0010      	movs	r0, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	1cfb      	adds	r3, r7, #3
 80013ae:	1c22      	adds	r2, r4, #0
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	003b      	movs	r3, r7
 80013b4:	1c02      	adds	r2, r0, #0
 80013b6:	801a      	strh	r2, [r3, #0]
 80013b8:	1cbb      	adds	r3, r7, #2
 80013ba:	1c0a      	adds	r2, r1, #0
 80013bc:	701a      	strb	r2, [r3, #0]
  int32_t ret;
  uint8_t currentRegValue;
  
  pObj->IO.Address = DevAddr<<1;
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	18db      	adds	r3, r3, r3
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	711a      	strb	r2, [r3, #4]
  
  if(Current < MAX_CH_CURRENT)
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b13      	cmp	r3, #19
 80013d0:	d80e      	bhi.n	80013f0 <LED1202_WriteLEDCurrentReg+0x52>
  {
    currentRegValue = (uint8_t ) (((uint16_t)Current *(uint16_t) MAX_VARIABLE)/(uint16_t)MAX_CH_CURRENT);
 80013d2:	1cfb      	adds	r3, r7, #3
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	0013      	movs	r3, r2
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	2114      	movs	r1, #20
 80013de:	0018      	movs	r0, r3
 80013e0:	f7fe ff1a 	bl	8000218 <__divsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	230b      	movs	r3, #11
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <LED1202_WriteLEDCurrentReg+0x5a>
  }
  else
  {
    currentRegValue = MAX_VARIABLE;
 80013f0:	230b      	movs	r3, #11
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	22ff      	movs	r2, #255	; 0xff
 80013f6:	701a      	strb	r2, [r3, #0]
  }
  
  ret = LED1202_WriteReg(&(pObj->Ctx), (LED1202_CS0_LED_CURRENT + Channel), &currentRegValue, 1); 
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	331c      	adds	r3, #28
 80013fc:	0018      	movs	r0, r3
 80013fe:	003b      	movs	r3, r7
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	3309      	adds	r3, #9
 8001404:	b299      	uxth	r1, r3
 8001406:	230b      	movs	r3, #11
 8001408:	18fa      	adds	r2, r7, r3
 800140a:	2301      	movs	r3, #1
 800140c:	f000 f868 	bl	80014e0 <LED1202_WriteReg>
 8001410:	0003      	movs	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 8001414:	68fb      	ldr	r3, [r7, #12]
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b005      	add	sp, #20
 800141c:	bd90      	pop	{r4, r7, pc}

0800141e <LED1202_WritePatternPWMConfig>:
 * @param  PatternNum Pattern Number
 * @param  DevAddr 7-Bit Device Address
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LED1202_WritePatternPWMConfig( LED1202_Object_TypeDef* pObj , uint8_t *pData ,uint8_t Channel, uint8_t PatternNum, uint8_t DevAddr)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	0019      	movs	r1, r3
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	1c0a      	adds	r2, r1, #0
 8001432:	701a      	strb	r2, [r3, #0]
  uint16_t digData;
  uint8_t chOffset;
  int32_t ret = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  pObj->IO.Address = DevAddr<<1;
 8001438:	2320      	movs	r3, #32
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	18db      	adds	r3, r3, r3
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	711a      	strb	r2, [r3, #4]
  digData = (*((uint16_t *)pData));
 8001446:	2012      	movs	r0, #18
 8001448:	183b      	adds	r3, r7, r0
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	801a      	strh	r2, [r3, #0]
  
  chOffset = (((uint8_t)2)*Channel) + (((uint8_t)24)*PatternNum);
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	7819      	ldrb	r1, [r3, #0]
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	0013      	movs	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	189b      	adds	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	18cb      	adds	r3, r1, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2111      	movs	r1, #17
 8001466:	187a      	adds	r2, r7, r1
 8001468:	18db      	adds	r3, r3, r3
 800146a:	7013      	strb	r3, [r2, #0]
  
  if(digData<=((uint16_t)4095))
 800146c:	183b      	adds	r3, r7, r0
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	015b      	lsls	r3, r3, #5
 8001474:	429a      	cmp	r2, r3
 8001476:	d20d      	bcs.n	8001494 <LED1202_WritePatternPWMConfig+0x76>
  {
   ret =  LED1202_WriteReg(&(pObj->Ctx),(uint8_t)( LED1202_PATTERN0_CS0_PWM + chOffset), pData, 2); 
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	331c      	adds	r3, #28
 800147c:	0018      	movs	r0, r3
 800147e:	187b      	adds	r3, r7, r1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	331e      	adds	r3, #30
 8001484:	b2db      	uxtb	r3, r3
 8001486:	b299      	uxth	r1, r3
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	2302      	movs	r3, #2
 800148c:	f000 f828 	bl	80014e0 <LED1202_WriteReg>
 8001490:	0003      	movs	r3, r0
 8001492:	617b      	str	r3, [r7, #20]
  }
  return (ret);
 8001494:	697b      	ldr	r3, [r7, #20]
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b006      	add	sp, #24
 800149c:	bd80      	pop	{r7, pc}

0800149e <LED1202_ReadReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_ReadReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t *Data, uint16_t len)
{
 800149e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a0:	b087      	sub	sp, #28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	0008      	movs	r0, r1
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	0019      	movs	r1, r3
 80014ac:	250a      	movs	r5, #10
 80014ae:	197b      	adds	r3, r7, r5
 80014b0:	1c02      	adds	r2, r0, #0
 80014b2:	801a      	strh	r2, [r3, #0]
 80014b4:	2608      	movs	r6, #8
 80014b6:	19bb      	adds	r3, r7, r6
 80014b8:	1c0a      	adds	r2, r1, #0
 80014ba:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp =(int32_t)( pLed->ReadReg(pLed->handle, Reg,  Data, len));
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	685c      	ldr	r4, [r3, #4]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6898      	ldr	r0, [r3, #8]
 80014c4:	197b      	adds	r3, r7, r5
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b2d9      	uxtb	r1, r3
 80014ca:	19bb      	adds	r3, r7, r6
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	47a0      	blx	r4
 80014d2:	0003      	movs	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]
  return (tmp);
 80014d6:	697b      	ldr	r3, [r7, #20]
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b007      	add	sp, #28
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e0 <LED1202_WriteReg>:
* @param  len   number of consecutive register to read
* @retval          interface status (MANDATORY: return 0 -> no Error)
*
*/
int32_t LED1202_WriteReg (const LED1202_Ctx_TypeDef *pLed, uint16_t Reg, const uint8_t* Data, uint16_t len)
{
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	0008      	movs	r0, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	0019      	movs	r1, r3
 80014ee:	250a      	movs	r5, #10
 80014f0:	197b      	adds	r3, r7, r5
 80014f2:	1c02      	adds	r2, r0, #0
 80014f4:	801a      	strh	r2, [r3, #0]
 80014f6:	2608      	movs	r6, #8
 80014f8:	19bb      	adds	r3, r7, r6
 80014fa:	1c0a      	adds	r2, r1, #0
 80014fc:	801a      	strh	r2, [r3, #0]
  int32_t tmp;
  tmp = (int32_t)(pLed->WriteReg(pLed->handle, Reg, Data, len));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681c      	ldr	r4, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6898      	ldr	r0, [r3, #8]
 8001506:	197b      	adds	r3, r7, r5
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	b2d9      	uxtb	r1, r3
 800150c:	19bb      	adds	r3, r7, r6
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	47a0      	blx	r4
 8001514:	0003      	movs	r3, r0
 8001516:	617b      	str	r3, [r7, #20]
  return (tmp);
 8001518:	697b      	ldr	r3, [r7, #20]
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b007      	add	sp, #28
 8001520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001524 <LED12A1_Init>:
/**
* @brief  LED12A1 Board Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_Init( void )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
  volatile int32_t ret =  (int32_t)LED1202_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  LED1202_IO_TypeDef ledIO;
  
  /*register SPI bus function to the component */
  ledIO.BusType = LED1202_I2C_BUS;
 800152e:	003b      	movs	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
  ledIO.Address = LED1202_I2C_ADDR;
 8001534:	003b      	movs	r3, r7
 8001536:	225c      	movs	r2, #92	; 0x5c
 8001538:	711a      	strb	r2, [r3, #4]
  ledIO.Init = LED12A1_I2C_Init;
 800153a:	003b      	movs	r3, r7
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <LED12A1_Init+0x50>)
 800153e:	609a      	str	r2, [r3, #8]
  ledIO.DeInit = LED12A1_I2C_DeInit;
 8001540:	003b      	movs	r3, r7
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <LED12A1_Init+0x54>)
 8001544:	60da      	str	r2, [r3, #12]
  ledIO.Write = LED12A1_I2C_Write;
 8001546:	003b      	movs	r3, r7
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <LED12A1_Init+0x58>)
 800154a:	611a      	str	r2, [r3, #16]
  ledIO.Read = LED12A1_I2C_Read;
 800154c:	003b      	movs	r3, r7
 800154e:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <LED12A1_Init+0x5c>)
 8001550:	615a      	str	r2, [r3, #20]
  ledIO.Delay = LED12A1_Delay;
 8001552:	003b      	movs	r3, r7
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LED12A1_Init+0x60>)
 8001556:	619a      	str	r2, [r3, #24]
  
  ret = LED1202_RegisterBusIO (&LED1202Obj, &ledIO);
 8001558:	003a      	movs	r2, r7
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <LED12A1_Init+0x64>)
 800155c:	0011      	movs	r1, r2
 800155e:	0018      	movs	r0, r3
 8001560:	f7ff fe36 	bl	80011d0 <LED1202_RegisterBusIO>
 8001564:	0003      	movs	r3, r0
 8001566:	61fb      	str	r3, [r7, #28]
  
  return (ret);
 8001568:	69fb      	ldr	r3, [r7, #28]
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b008      	add	sp, #32
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	0800158d 	.word	0x0800158d
 8001578:	0800159d 	.word	0x0800159d
 800157c:	080015c1 	.word	0x080015c1
 8001580:	08001625 	.word	0x08001625
 8001584:	08001b19 	.word	0x08001b19
 8001588:	20000240 	.word	0x20000240

0800158c <BSP_I2C_Init>:
/**
* @brief  LED12A1 I2C Initialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t  BSP_I2C_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  MX_I2C1_Init();
 8001590:	f7ff fae4 	bl	8000b5c <MX_I2C1_Init>
  return (0);
 8001594:	2300      	movs	r3, #0
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <BSP_I2C_DeInit>:
/**
* @brief  LED12A1 I2C DeInitialization 
* @retval 0 in case of success, an error code otherwise
*/
int32_t BSP_I2C_DeInit(void)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret;
  ret  = HAL_I2C_DeInit(&hi2c1);
 80015a2:	1dfc      	adds	r4, r7, #7
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <BSP_I2C_DeInit+0x20>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 fe7e 	bl	80022a8 <HAL_I2C_DeInit>
 80015ac:	0003      	movs	r3, r0
 80015ae:	7023      	strb	r3, [r4, #0]
  return((int32_t)ret);
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	781b      	ldrb	r3, [r3, #0]
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b003      	add	sp, #12
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	200000ac 	.word	0x200000ac

080015c0 <BSP_I2C_Write>:
* @param  Reg: The target register address to write
* @param  Value: The target register value to be written
* @retval BSP status
*/
int32_t BSP_I2C_Write(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	0004      	movs	r4, r0
 80015c8:	0008      	movs	r0, r1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	0019      	movs	r1, r3
 80015ce:	250e      	movs	r5, #14
 80015d0:	197b      	adds	r3, r7, r5
 80015d2:	1c22      	adds	r2, r4, #0
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	240c      	movs	r4, #12
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	1c02      	adds	r2, r0, #0
 80015dc:	801a      	strh	r2, [r3, #0]
 80015de:	1dbb      	adds	r3, r7, #6
 80015e0:	1c0a      	adds	r2, r1, #0
 80015e2:	801a      	strh	r2, [r3, #0]
  int32_t ret = (int32_t)BSP_ERROR_BUS_FAILURE;
 80015e4:	2308      	movs	r3, #8
 80015e6:	425b      	negs	r3, r3
 80015e8:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Write(&hi2c1, (uint8_t)DevAddr,
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b299      	uxth	r1, r3
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <BSP_I2C_Write+0x60>)
 80015f8:	23fa      	movs	r3, #250	; 0xfa
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	1dbb      	adds	r3, r7, #6
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2301      	movs	r3, #1
 800160a:	f000 fe7d 	bl	8002308 <HAL_I2C_Mem_Write>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d101      	bne.n	8001616 <BSP_I2C_Write+0x56>
                        (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                        (uint8_t *)pData, Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001616:	697b      	ldr	r3, [r7, #20]
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b006      	add	sp, #24
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	200000ac 	.word	0x200000ac

08001624 <BSP_I2C_Read>:
* @param  DevAddr: Device address on BUS
* @param  Reg: The target register address to read
* @retval BSP status
*/
int32_t BSP_I2C_Read(uint16_t DevAddr, uint16_t Reg, const uint8_t* pData, uint16_t Len)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af04      	add	r7, sp, #16
 800162a:	0004      	movs	r4, r0
 800162c:	0008      	movs	r0, r1
 800162e:	60ba      	str	r2, [r7, #8]
 8001630:	0019      	movs	r1, r3
 8001632:	250e      	movs	r5, #14
 8001634:	197b      	adds	r3, r7, r5
 8001636:	1c22      	adds	r2, r4, #0
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	240c      	movs	r4, #12
 800163c:	193b      	adds	r3, r7, r4
 800163e:	1c02      	adds	r2, r0, #0
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	1dbb      	adds	r3, r7, #6
 8001644:	1c0a      	adds	r2, r1, #0
 8001646:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8001648:	2308      	movs	r3, #8
 800164a:	425b      	negs	r3, r3
 800164c:	617b      	str	r3, [r7, #20]
  
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, (uint16_t)Reg,
 800164e:	193b      	adds	r3, r7, r4
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	197b      	adds	r3, r7, r5
 8001654:	8819      	ldrh	r1, [r3, #0]
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <BSP_I2C_Read+0x5c>)
 8001658:	23fa      	movs	r3, #250	; 0xfa
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	1dbb      	adds	r3, r7, #6
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	f000 ff7b 	bl	8002564 <HAL_I2C_Mem_Read>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d101      	bne.n	8001676 <BSP_I2C_Read+0x52>
                       I2C_MEMADD_SIZE_8BIT, (uint8_t *)pData,
                       Len, TIMEOUT_DURATION) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001676:	697b      	ldr	r3, [r7, #20]
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b006      	add	sp, #24
 800167e:	bdb0      	pop	{r4, r5, r7, pc}
 8001680:	200000ac 	.word	0x200000ac

08001684 <ReadRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t ReadRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	0008      	movs	r0, r1
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	0019      	movs	r1, r3
 8001692:	250b      	movs	r5, #11
 8001694:	197b      	adds	r3, r7, r5
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	2608      	movs	r6, #8
 800169c:	19bb      	adds	r3, r7, r6
 800169e:	1c0a      	adds	r2, r1, #0
 80016a0:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj = (LED1202_Object_TypeDef *)Handle;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Read(led1202Obj->IO.Address, Reg, pData, Length);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	695c      	ldr	r4, [r3, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	b298      	uxth	r0, r3
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b299      	uxth	r1, r3
 80016b6:	19bb      	adds	r3, r7, r6
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	47a0      	blx	r4
 80016be:	0003      	movs	r3, r0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b007      	add	sp, #28
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c8 <WriteRegWrap>:
* @param  pData the stored data pointer
* @param  Length the length
* @retval 0 in case of success, an error code otherwise
*/
int32_t WriteRegWrap(void *Handle, uint8_t Reg, const uint8_t *pData, uint16_t Length)
{
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	0008      	movs	r0, r1
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	0019      	movs	r1, r3
 80016d6:	250b      	movs	r5, #11
 80016d8:	197b      	adds	r3, r7, r5
 80016da:	1c02      	adds	r2, r0, #0
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	2608      	movs	r6, #8
 80016e0:	19bb      	adds	r3, r7, r6
 80016e2:	1c0a      	adds	r2, r1, #0
 80016e4:	801a      	strh	r2, [r3, #0]
  LED1202_Object_TypeDef *led1202Obj  = (LED1202_Object_TypeDef *)Handle;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	617b      	str	r3, [r7, #20]
  
  return led1202Obj->IO.Write(led1202Obj->IO.Address, Reg, pData, Length);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	691c      	ldr	r4, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	b298      	uxth	r0, r3
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b299      	uxth	r1, r3
 80016fa:	19bb      	adds	r3, r7, r6
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	47a0      	blx	r4
 8001702:	0003      	movs	r3, r0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b007      	add	sp, #28
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170c <LED12A1_DeviceEnable>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_DeviceEnable( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	000a      	movs	r2, r1
 8001716:	1cfb      	adds	r3, r7, #3
 8001718:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint8_t tmp = 0x01;
 800171e:	230f      	movs	r3, #15
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
  uint8_t devAddr;
  
  switch(DevSelect)
 8001726:	1cfb      	adds	r3, r7, #3
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b04      	cmp	r3, #4
 800172c:	d81d      	bhi.n	800176a <LED12A1_DeviceEnable+0x5e>
 800172e:	009a      	lsls	r2, r3, #2
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <LED12A1_DeviceEnable+0x98>)
 8001732:	18d3      	adds	r3, r2, r3
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 8001738:	2317      	movs	r3, #23
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	2258      	movs	r2, #88	; 0x58
 800173e:	701a      	strb	r2, [r3, #0]
    
    break;
 8001740:	e018      	b.n	8001774 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 8001742:	2317      	movs	r3, #23
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2259      	movs	r2, #89	; 0x59
 8001748:	701a      	strb	r2, [r3, #0]
    break;
 800174a:	e013      	b.n	8001774 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 800174c:	2317      	movs	r3, #23
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	225a      	movs	r2, #90	; 0x5a
 8001752:	701a      	strb	r2, [r3, #0]
    break;
 8001754:	e00e      	b.n	8001774 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 8001756:	2317      	movs	r3, #23
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	225b      	movs	r2, #91	; 0x5b
 800175c:	701a      	strb	r2, [r3, #0]
    break;  
 800175e:	e009      	b.n	8001774 <LED12A1_DeviceEnable+0x68>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 8001760:	2317      	movs	r3, #23
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	225c      	movs	r2, #92	; 0x5c
 8001766:	701a      	strb	r2, [r3, #0]
    break;
 8001768:	e004      	b.n	8001774 <LED12A1_DeviceEnable+0x68>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 800176a:	2317      	movs	r3, #23
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	225c      	movs	r2, #92	; 0x5c
 8001770:	701a      	strb	r2, [r3, #0]
    break;
 8001772:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = (uint8_t)(devAddr<<1);
 8001774:	2317      	movs	r3, #23
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	18db      	adds	r3, r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	711a      	strb	r2, [r3, #4]
  
  ret = LED1202_WriteReg(&(pObj->Ctx), LED1202_DEVICE_ENABLE, &tmp, 1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	331c      	adds	r3, #28
 8001786:	0018      	movs	r0, r3
 8001788:	230f      	movs	r3, #15
 800178a:	18fa      	adds	r2, r7, r3
 800178c:	2301      	movs	r3, #1
 800178e:	2101      	movs	r1, #1
 8001790:	f7ff fea6 	bl	80014e0 <LED1202_WriteReg>
 8001794:	0003      	movs	r3, r0
 8001796:	613b      	str	r3, [r7, #16]
  return(ret);
 8001798:	693b      	ldr	r3, [r7, #16]
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b006      	add	sp, #24
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	080048b4 	.word	0x080048b4

080017a8 <LED12A1_SetDeviceAddr>:
* @param  pObj pointer to Object
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_SetDeviceAddr( LED1202_Object_TypeDef* pObj , TypedefEnumDevAddr DevSelect)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	000a      	movs	r2, r1
 80017b2:	1cfb      	adds	r3, r7, #3
 80017b4:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  uint8_t devAddr;
  
  switch(DevSelect)
 80017ba:	1cfb      	adds	r3, r7, #3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d81d      	bhi.n	80017fe <LED12A1_SetDeviceAddr+0x56>
 80017c2:	009a      	lsls	r2, r3, #2
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <LED12A1_SetDeviceAddr+0x74>)
 80017c6:	18d3      	adds	r3, r2, r3
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	469f      	mov	pc, r3
  {
  case LED_DEVICE1:
    devAddr = LED1202_DEV1_7BIT_ADDR;
 80017cc:	230f      	movs	r3, #15
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	2258      	movs	r2, #88	; 0x58
 80017d2:	701a      	strb	r2, [r3, #0]
    
    break;
 80017d4:	e018      	b.n	8001808 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE2:
    devAddr = LED1202_DEV2_7BIT_ADDR;
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2259      	movs	r2, #89	; 0x59
 80017dc:	701a      	strb	r2, [r3, #0]
    break;
 80017de:	e013      	b.n	8001808 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE3:
    devAddr = LED1202_DEV3_7BIT_ADDR;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	225a      	movs	r2, #90	; 0x5a
 80017e6:	701a      	strb	r2, [r3, #0]
    break;
 80017e8:	e00e      	b.n	8001808 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE4:
    devAddr = LED1202_DEV4_7BIT_ADDR;
 80017ea:	230f      	movs	r3, #15
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	225b      	movs	r2, #91	; 0x5b
 80017f0:	701a      	strb	r2, [r3, #0]
    break;
 80017f2:	e009      	b.n	8001808 <LED12A1_SetDeviceAddr+0x60>
    
  case LED_DEVICE_ALL:
    devAddr = LED1202_GLOBAL_7BIT_ADDR; /*GLOBAL ADDRESS*/
 80017f4:	230f      	movs	r3, #15
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	225c      	movs	r2, #92	; 0x5c
 80017fa:	701a      	strb	r2, [r3, #0]
    break;
 80017fc:	e004      	b.n	8001808 <LED12A1_SetDeviceAddr+0x60>
    
  default:
    devAddr = LED1202_GLOBAL_7BIT_ADDR;
 80017fe:	230f      	movs	r3, #15
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	225c      	movs	r2, #92	; 0x5c
 8001804:	701a      	strb	r2, [r3, #0]
    break;
 8001806:	46c0      	nop			; (mov r8, r8)
    
  }
  
  pObj->IO.Address = devAddr;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	220f      	movs	r2, #15
 800180c:	18ba      	adds	r2, r7, r2
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	711a      	strb	r2, [r3, #4]
  
  return(ret);
 8001812:	68bb      	ldr	r3, [r7, #8]
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}
 800181c:	080048c8 	.word	0x080048c8

08001820 <LED12A1_ScanAvailDevice>:
* @param  pObj pointer to Object
* @param  pBuff Pointer to buffer to store the Available devices 7 bit addresses
* @retval Number of LED1202 devices available on board
*/
int32_t LED12A1_ScanAvailDevice( LED1202_Object_TypeDef* pObj ,uint8_t *pBuff)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint8_t i2cStartAddr = 0x58;
 800182a:	2113      	movs	r1, #19
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2258      	movs	r2, #88	; 0x58
 8001830:	701a      	strb	r2, [r3, #0]
  uint8_t i2cEndAddr = 0x60;
 8001832:	2312      	movs	r3, #18
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	2260      	movs	r2, #96	; 0x60
 8001838:	701a      	strb	r2, [r3, #0]
  uint8_t addr;
  uint8_t *buffPtr = pBuff;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	61bb      	str	r3, [r7, #24]
  uint8_t devId;
  int32_t status;
  int32_t numDev = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 8001842:	231f      	movs	r3, #31
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	187a      	adds	r2, r7, r1
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e020      	b.n	8001890 <LED12A1_ScanAvailDevice+0x70>
  {
    devId = 0;
 800184e:	210b      	movs	r1, #11
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
    status =  LED1202_ReadID(pObj, &devId, addr);
 8001856:	241f      	movs	r4, #31
 8001858:	193b      	adds	r3, r7, r4
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	1879      	adds	r1, r7, r1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff fcff 	bl	8001264 <LED1202_ReadID>
 8001866:	0003      	movs	r3, r0
 8001868:	60fb      	str	r3, [r7, #12]
    
    if(status == ((int32_t)LED1202_OK))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <LED12A1_ScanAvailDevice+0x64>
    {
      numDev++;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
      *buffPtr = addr;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	193a      	adds	r2, r7, r4
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	701a      	strb	r2, [r3, #0]
      buffPtr++;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	3301      	adds	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  for (addr = i2cStartAddr; addr<=i2cEndAddr; addr++)
 8001884:	211f      	movs	r1, #31
 8001886:	187b      	adds	r3, r7, r1
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	187b      	adds	r3, r7, r1
 800188c:	3201      	adds	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	231f      	movs	r3, #31
 8001892:	18fa      	adds	r2, r7, r3
 8001894:	2312      	movs	r3, #18
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d9d6      	bls.n	800184e <LED12A1_ScanAvailDevice+0x2e>
    }
  }
  
  return(numDev);
 80018a0:	697b      	ldr	r3, [r7, #20]
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b009      	add	sp, #36	; 0x24
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <LED12A1_AnalogDimming>:
* @param  Channel The channel to be written (0 to 11)
* @param  DevSelect Device selected (LED_DEVICE1, LED_DEVICE2 ,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval Number of LED1202 devices available on board
*/
int32_t LED12A1_AnalogDimming( LED1202_Object_TypeDef* pObj , uint8_t Current, uint8_t Channel, TypedefEnumDevAddr DevSelect)
{
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	000c      	movs	r4, r1
 80018b4:	0010      	movs	r0, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	1cfb      	adds	r3, r7, #3
 80018ba:	1c22      	adds	r2, r4, #0
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	1cbb      	adds	r3, r7, #2
 80018c0:	1c02      	adds	r2, r0, #0
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	1c7b      	adds	r3, r7, #1
 80018c6:	1c0a      	adds	r2, r1, #0
 80018c8:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 80018ce:	1c7b      	adds	r3, r7, #1
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff ff66 	bl	80017a8 <LED12A1_SetDeviceAddr>
 80018dc:	0003      	movs	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
  ret = LED1202_WriteLEDCurrentReg(pObj ,Current, Channel, pObj->IO.Address); 
 80018e0:	1cbb      	adds	r3, r7, #2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	791c      	ldrb	r4, [r3, #4]
 80018ea:	1cfb      	adds	r3, r7, #3
 80018ec:	7819      	ldrb	r1, [r3, #0]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	0023      	movs	r3, r4
 80018f2:	f7ff fd54 	bl	800139e <LED1202_WriteLEDCurrentReg>
 80018f6:	0003      	movs	r3, r0
 80018f8:	60fb      	str	r3, [r7, #12]
  return(ret);
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b005      	add	sp, #20
 8001902:	bd90      	pop	{r4, r7, pc}

08001904 <LED12A1_DigitalDimming>:
* @param  PatternNum Pattern Number
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval ret the status of the operartion
*/
int32_t LED12A1_DigitalDimming( LED1202_Object_TypeDef* pObj ,uint16_t *pBuff,uint8_t Channel, uint8_t PatternNum, TypedefEnumDevAddr DevSelect)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	0019      	movs	r1, r3
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	1dbb      	adds	r3, r7, #6
 8001916:	1c0a      	adds	r2, r1, #0
 8001918:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 800191e:	2328      	movs	r3, #40	; 0x28
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ff3d 	bl	80017a8 <LED12A1_SetDeviceAddr>
 800192e:	0003      	movs	r3, r0
 8001930:	617b      	str	r3, [r7, #20]
  ret = LED1202_WritePatternPWMConfig(pObj ,(uint8_t *)pBuff,Channel, PatternNum, pObj->IO.Address);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	1dba      	adds	r2, r7, #6
 8001938:	7814      	ldrb	r4, [r2, #0]
 800193a:	1dfa      	adds	r2, r7, #7
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	0023      	movs	r3, r4
 8001946:	f7ff fd6a 	bl	800141e <LED1202_WritePatternPWMConfig>
 800194a:	0003      	movs	r3, r0
 800194c:	617b      	str	r3, [r7, #20]
  return(ret);
 800194e:	697b      	ldr	r3, [r7, #20]
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b007      	add	sp, #28
 8001956:	bd90      	pop	{r4, r7, pc}

08001958 <LED12A1_ChannelEnable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelEnable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel, TypedefEnumDevAddr DevSelect)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	0008      	movs	r0, r1
 8001962:	0011      	movs	r1, r2
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	1c02      	adds	r2, r0, #0
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	1c7b      	adds	r3, r7, #1
 800196c:	1c0a      	adds	r2, r1, #0
 800196e:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret = (int32_t) LED1202_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 8001974:	1c7b      	adds	r3, r7, #1
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0011      	movs	r1, r2
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ff13 	bl	80017a8 <LED12A1_SetDeviceAddr>
 8001982:	0003      	movs	r3, r0
 8001984:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj ,(uint16_t) Channel ,CH_STATE_ENABLE, pObj->IO.Address);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	791a      	ldrb	r2, [r3, #4]
 800198a:	1cbb      	adds	r3, r7, #2
 800198c:	8819      	ldrh	r1, [r3, #0]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	0013      	movs	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	f7ff fc8e 	bl	80012b4 <LED1202_SetChannelState>
 8001998:	0003      	movs	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 800199c:	68fb      	ldr	r3, [r7, #12]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <LED12A1_ChannelDisable>:
* @param  Channel any combination of LED_CHANNEL_0,LED_CHANNEL_1,LED_CHANNEL_2..LED_CHANNEL_11 can be passed
* @param  DevSelect Selected Device(  LED_DEVICE1 ,LED_DEVICE2,LED_DEVICE3 or LED_DEVICE_ALL)
* @retval 0 in case of success, an error code otherwise
*/
int32_t LED12A1_ChannelDisable( LED1202_Object_TypeDef* pObj , TypeDefChannel Channel,TypedefEnumDevAddr DevSelect)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	0008      	movs	r0, r1
 80019b0:	0011      	movs	r1, r2
 80019b2:	1cbb      	adds	r3, r7, #2
 80019b4:	1c02      	adds	r2, r0, #0
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	1c7b      	adds	r3, r7, #1
 80019ba:	1c0a      	adds	r2, r1, #0
 80019bc:	701a      	strb	r2, [r3, #0]
  volatile int32_t ret =  (int32_t)LED1202_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  ret = LED12A1_SetDeviceAddr(pObj ,DevSelect);
 80019c2:	1c7b      	adds	r3, r7, #1
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0011      	movs	r1, r2
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff feec 	bl	80017a8 <LED12A1_SetDeviceAddr>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
  ret = LED1202_SetChannelState(pObj , (uint16_t) Channel ,CH_STATE_DISABLE, pObj->IO.Address);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	791a      	ldrb	r2, [r3, #4]
 80019d8:	1cbb      	adds	r3, r7, #2
 80019da:	8819      	ldrh	r1, [r3, #0]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	0013      	movs	r3, r2
 80019e0:	2201      	movs	r2, #1
 80019e2:	f7ff fc67 	bl	80012b4 <LED1202_SetChannelState>
 80019e6:	0003      	movs	r3, r0
 80019e8:	60fb      	str	r3, [r7, #12]
  
  return(ret);
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <SystemInit+0x14>)
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	0512      	lsls	r2, r2, #20
 80019fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_Init+0x3c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Init+0x3c>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0049      	lsls	r1, r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 f810 	bl	8001a4c <HAL_InitTick>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a30:	1dfb      	adds	r3, r7, #7
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e001      	b.n	8001a3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fa8c 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3c:	1dfb      	adds	r3, r7, #7
 8001a3e:	781b      	ldrb	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_InitTick+0x88>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d02b      	beq.n	8001abc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_InitTick+0x8c>)
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_InitTick+0x88>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	23fa      	movs	r3, #250	; 0xfa
 8001a70:	0098      	lsls	r0, r3, #2
 8001a72:	f7fe fb47 	bl	8000104 <__udivsi3>
 8001a76:	0003      	movs	r3, r0
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f7fe fb42 	bl	8000104 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f929 	bl	8001cda <HAL_SYSTICK_Config>
 8001a88:	1e03      	subs	r3, r0, #0
 8001a8a:	d112      	bne.n	8001ab2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d80a      	bhi.n	8001aa8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	2301      	movs	r3, #1
 8001a96:	425b      	negs	r3, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f908 	bl	8001cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_InitTick+0x90>)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e00d      	b.n	8001ac4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e008      	b.n	8001ac4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e003      	b.n	8001ac4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001abc:	230f      	movs	r3, #15
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b005      	add	sp, #20
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x1c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	001a      	movs	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	18d2      	adds	r2, r2, r3
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_IncTick+0x20>)
 8001af2:	601a      	str	r2, [r3, #0]
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000026c 	.word	0x2000026c

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_GetTick+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	2000026c 	.word	0x2000026c

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	001a      	movs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	189b      	adds	r3, r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	f7ff ffe0 	bl	8001b04 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	20000008 	.word	0x20000008

08001b60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40010000 	.word	0x40010000
 8001b88:	fffff9ff 	.word	0xfffff9ff

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	0002      	movs	r2, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba0:	d828      	bhi.n	8001bf4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <__NVIC_SetPriority+0xd4>)
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	33c0      	adds	r3, #192	; 0xc0
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	589b      	ldr	r3, [r3, r2]
 8001bb2:	1dfa      	adds	r2, r7, #7
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	2203      	movs	r2, #3
 8001bba:	400a      	ands	r2, r1
 8001bbc:	00d2      	lsls	r2, r2, #3
 8001bbe:	21ff      	movs	r1, #255	; 0xff
 8001bc0:	4091      	lsls	r1, r2
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	43d2      	mvns	r2, r2
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	22ff      	movs	r2, #255	; 0xff
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2303      	movs	r3, #3
 8001bda:	4003      	ands	r3, r0
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be0:	481f      	ldr	r0, [pc, #124]	; (8001c60 <__NVIC_SetPriority+0xd4>)
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	430a      	orrs	r2, r1
 8001bec:	33c0      	adds	r3, #192	; 0xc0
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bf2:	e031      	b.n	8001c58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <__NVIC_SetPriority+0xd8>)
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	400b      	ands	r3, r1
 8001c00:	3b08      	subs	r3, #8
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3306      	adds	r3, #6
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1dfa      	adds	r2, r7, #7
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	0011      	movs	r1, r2
 8001c14:	2203      	movs	r2, #3
 8001c16:	400a      	ands	r2, r1
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	21ff      	movs	r1, #255	; 0xff
 8001c1c:	4091      	lsls	r1, r2
 8001c1e:	000a      	movs	r2, r1
 8001c20:	43d2      	mvns	r2, r2
 8001c22:	401a      	ands	r2, r3
 8001c24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	019b      	lsls	r3, r3, #6
 8001c2a:	22ff      	movs	r2, #255	; 0xff
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	0018      	movs	r0, r3
 8001c34:	2303      	movs	r3, #3
 8001c36:	4003      	ands	r3, r0
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <__NVIC_SetPriority+0xd8>)
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	001c      	movs	r4, r3
 8001c44:	230f      	movs	r3, #15
 8001c46:	4023      	ands	r3, r4
 8001c48:	3b08      	subs	r3, #8
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	3306      	adds	r3, #6
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	18c3      	adds	r3, r0, r3
 8001c54:	3304      	adds	r3, #4
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b003      	add	sp, #12
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	045b      	lsls	r3, r3, #17
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d301      	bcc.n	8001c80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e010      	b.n	8001ca2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <SysTick_Config+0x44>)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	3a01      	subs	r2, #1
 8001c86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	425b      	negs	r3, r3
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff ff7c 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x44>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x44>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	210f      	movs	r1, #15
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	1c02      	adds	r2, r0, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	0011      	movs	r1, r2
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b004      	add	sp, #16
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff ffbf 	bl	8001c68 <SysTick_Config>
 8001cea:	0003      	movs	r3, r0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	e14d      	b.n	8001fa0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4091      	lsls	r1, r2
 8001d0e:	000a      	movs	r2, r1
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d100      	bne.n	8001d1c <HAL_GPIO_Init+0x28>
 8001d1a:	e13e      	b.n	8001f9a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d005      	beq.n	8001d34 <HAL_GPIO_Init+0x40>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d130      	bne.n	8001d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	409a      	lsls	r2, r3
 8001d42:	0013      	movs	r3, r2
 8001d44:	43da      	mvns	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	409a      	lsls	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	43da      	mvns	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	2201      	movs	r2, #1
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d017      	beq.n	8001dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d123      	bne.n	8001e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	58d3      	ldr	r3, [r2, r3]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2207      	movs	r2, #7
 8001df0:	4013      	ands	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	220f      	movs	r2, #15
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2107      	movs	r1, #7
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	6939      	ldr	r1, [r7, #16]
 8001e24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	43da      	mvns	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	401a      	ands	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	23c0      	movs	r3, #192	; 0xc0
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_GPIO_Init+0x174>
 8001e66:	e098      	b.n	8001f9a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3318      	adds	r3, #24
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	589b      	ldr	r3, [r3, r2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	220f      	movs	r2, #15
 8001e80:	409a      	lsls	r2, r3
 8001e82:	0013      	movs	r3, r2
 8001e84:	43da      	mvns	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	23a0      	movs	r3, #160	; 0xa0
 8001e90:	05db      	lsls	r3, r3, #23
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x1d6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a48      	ldr	r2, [pc, #288]	; (8001fbc <HAL_GPIO_Init+0x2c8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x1d2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a47      	ldr	r2, [pc, #284]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x1ce>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a46      	ldr	r2, [pc, #280]	; (8001fc4 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x1ca>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_GPIO_Init+0x2d4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x1c6>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001eba:	2305      	movs	r3, #5
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	2103      	movs	r1, #3
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	00d2      	lsls	r2, r2, #3
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001edc:	4936      	ldr	r1, [pc, #216]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	035b      	lsls	r3, r3, #13
 8001f02:	4013      	ands	r3, r2
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	039b      	lsls	r3, r3, #14
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001f40:	2384      	movs	r3, #132	; 0x84
 8001f42:	58d3      	ldr	r3, [r2, r3]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	029b      	lsls	r3, r3, #10
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f64:	4914      	ldr	r1, [pc, #80]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001f66:	2284      	movs	r2, #132	; 0x84
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	58d3      	ldr	r3, [r2, r3]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43da      	mvns	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	025b      	lsls	r3, r3, #9
 8001f86:	4013      	ands	r3, r2
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f92:	4909      	ldr	r1, [pc, #36]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	40da      	lsrs	r2, r3
 8001fa8:	1e13      	subs	r3, r2, #0
 8001faa:	d000      	beq.n	8001fae <HAL_GPIO_Init+0x2ba>
 8001fac:	e6aa      	b.n	8001d04 <HAL_GPIO_Init+0x10>
  }
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b006      	add	sp, #24
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	50000400 	.word	0x50000400
 8001fc0:	50000800 	.word	0x50000800
 8001fc4:	50000c00 	.word	0x50000c00
 8001fc8:	50001000 	.word	0x50001000

08001fcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001fda:	e0ba      	b.n	8002152 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d100      	bne.n	8001ff0 <HAL_GPIO_DeInit+0x24>
 8001fee:	e0ad      	b.n	800214c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8001ff0:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3318      	adds	r3, #24
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	589b      	ldr	r3, [r3, r2]
 8001ffc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2203      	movs	r2, #3
 8002002:	4013      	ands	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	220f      	movs	r2, #15
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	23a0      	movs	r3, #160	; 0xa0
 8002014:	05db      	lsls	r3, r3, #23
 8002016:	429a      	cmp	r2, r3
 8002018:	d019      	beq.n	800204e <HAL_GPIO_DeInit+0x82>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a53      	ldr	r2, [pc, #332]	; (800216c <HAL_GPIO_DeInit+0x1a0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_DeInit+0x7e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_GPIO_DeInit+0x1a4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_DeInit+0x7a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a51      	ldr	r2, [pc, #324]	; (8002174 <HAL_GPIO_DeInit+0x1a8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_DeInit+0x76>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a50      	ldr	r2, [pc, #320]	; (8002178 <HAL_GPIO_DeInit+0x1ac>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_DeInit+0x72>
 800203a:	2304      	movs	r3, #4
 800203c:	e008      	b.n	8002050 <HAL_GPIO_DeInit+0x84>
 800203e:	2305      	movs	r3, #5
 8002040:	e006      	b.n	8002050 <HAL_GPIO_DeInit+0x84>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_DeInit+0x84>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_DeInit+0x84>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_DeInit+0x84>
 800204e:	2300      	movs	r3, #0
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	2103      	movs	r1, #3
 8002054:	400a      	ands	r2, r1
 8002056:	00d2      	lsls	r2, r2, #3
 8002058:	4093      	lsls	r3, r2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d136      	bne.n	80020ce <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002060:	4a41      	ldr	r2, [pc, #260]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	58d3      	ldr	r3, [r2, r3]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	43d2      	mvns	r2, r2
 800206a:	493f      	ldr	r1, [pc, #252]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 800206c:	4013      	ands	r3, r2
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002072:	4a3d      	ldr	r2, [pc, #244]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 8002074:	2384      	movs	r3, #132	; 0x84
 8002076:	58d3      	ldr	r3, [r2, r3]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	43d2      	mvns	r2, r2
 800207c:	493a      	ldr	r1, [pc, #232]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 800207e:	4013      	ands	r3, r2
 8002080:	2284      	movs	r2, #132	; 0x84
 8002082:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002084:	4b38      	ldr	r3, [pc, #224]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43d9      	mvns	r1, r3
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 800208e:	400a      	ands	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002092:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43d9      	mvns	r1, r3
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2203      	movs	r2, #3
 80020a4:	4013      	ands	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	220f      	movs	r2, #15
 80020aa:	409a      	lsls	r2, r3
 80020ac:	0013      	movs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80020b0:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3318      	adds	r3, #24
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	589a      	ldr	r2, [r3, r2]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43d9      	mvns	r1, r3
 80020c0:	4829      	ldr	r0, [pc, #164]	; (8002168 <HAL_GPIO_DeInit+0x19c>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	400a      	ands	r2, r1
 80020c8:	3318      	adds	r3, #24
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2103      	movs	r1, #3
 80020d8:	4099      	lsls	r1, r3
 80020da:	000b      	movs	r3, r1
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	58d3      	ldr	r3, [r2, r3]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	2107      	movs	r1, #7
 80020f2:	400a      	ands	r2, r1
 80020f4:	0092      	lsls	r2, r2, #2
 80020f6:	210f      	movs	r1, #15
 80020f8:	4091      	lsls	r1, r2
 80020fa:	000a      	movs	r2, r1
 80020fc:	43d1      	mvns	r1, r2
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	08d2      	lsrs	r2, r2, #3
 8002102:	4019      	ands	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3208      	adds	r2, #8
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	0052      	lsls	r2, r2, #1
 8002114:	2103      	movs	r1, #3
 8002116:	4091      	lsls	r1, r2
 8002118:	000a      	movs	r2, r1
 800211a:	43d2      	mvns	r2, r2
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2101      	movs	r1, #1
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4091      	lsls	r1, r2
 800212c:	000a      	movs	r2, r1
 800212e:	43d2      	mvns	r2, r2
 8002130:	401a      	ands	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	0052      	lsls	r2, r2, #1
 800213e:	2103      	movs	r1, #3
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	43d2      	mvns	r2, r2
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3301      	adds	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	40da      	lsrs	r2, r3
 8002158:	1e13      	subs	r3, r2, #0
 800215a:	d000      	beq.n	800215e <HAL_GPIO_DeInit+0x192>
 800215c:	e73e      	b.n	8001fdc <HAL_GPIO_DeInit+0x10>
  }
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b006      	add	sp, #24
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021800 	.word	0x40021800
 800216c:	50000400 	.word	0x50000400
 8002170:	50000800 	.word	0x50000800
 8002174:	50000c00 	.word	0x50000c00
 8002178:	50001000 	.word	0x50001000

0800217c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e082      	b.n	8002294 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2241      	movs	r2, #65	; 0x41
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2240      	movs	r2, #64	; 0x40
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fefd 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2241      	movs	r2, #65	; 0x41
 80021ae:	2124      	movs	r1, #36	; 0x24
 80021b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	438a      	bics	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4934      	ldr	r1, [pc, #208]	; (800229c <HAL_I2C_Init+0x120>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4931      	ldr	r1, [pc, #196]	; (80022a0 <HAL_I2C_Init+0x124>)
 80021dc:	400a      	ands	r2, r1
 80021de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d108      	bne.n	80021fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	0209      	lsls	r1, r1, #8
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	e007      	b.n	800220a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2184      	movs	r1, #132	; 0x84
 8002204:	0209      	lsls	r1, r1, #8
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d104      	bne.n	800221c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	491f      	ldr	r1, [pc, #124]	; (80022a4 <HAL_I2C_Init+0x128>)
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	491a      	ldr	r1, [pc, #104]	; (80022a0 <HAL_I2C_Init+0x124>)
 8002238:	400a      	ands	r2, r1
 800223a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	431a      	orrs	r2, r3
 8002246:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69d9      	ldr	r1, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2241      	movs	r2, #65	; 0x41
 8002280:	2120      	movs	r1, #32
 8002282:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2242      	movs	r2, #66	; 0x42
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}
 800229c:	f0ffffff 	.word	0xf0ffffff
 80022a0:	ffff7fff 	.word	0xffff7fff
 80022a4:	02008000 	.word	0x02008000

080022a8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e022      	b.n	8002300 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2241      	movs	r2, #65	; 0x41
 80022be:	2124      	movs	r1, #36	; 0x24
 80022c0:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2101      	movs	r1, #1
 80022ce:	438a      	bics	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7fe feb7 	bl	8001048 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2241      	movs	r2, #65	; 0x41
 80022e4:	2100      	movs	r1, #0
 80022e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2242      	movs	r2, #66	; 0x42
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	000c      	movs	r4, r1
 8002312:	0010      	movs	r0, r2
 8002314:	0019      	movs	r1, r3
 8002316:	230a      	movs	r3, #10
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	1c22      	adds	r2, r4, #0
 800231c:	801a      	strh	r2, [r3, #0]
 800231e:	2308      	movs	r3, #8
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	1c02      	adds	r2, r0, #0
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	1c0a      	adds	r2, r1, #0
 800232a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2241      	movs	r2, #65	; 0x41
 8002330:	5c9b      	ldrb	r3, [r3, r2]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b20      	cmp	r3, #32
 8002336:	d000      	beq.n	800233a <HAL_I2C_Mem_Write+0x32>
 8002338:	e10c      	b.n	8002554 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_I2C_Mem_Write+0x42>
 8002340:	232c      	movs	r3, #44	; 0x2c
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0ff      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2240      	movs	r2, #64	; 0x40
 800235a:	5c9b      	ldrb	r3, [r3, r2]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_I2C_Mem_Write+0x5c>
 8002360:	2302      	movs	r3, #2
 8002362:	e0f8      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	2101      	movs	r1, #1
 800236a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800236c:	f7ff fbca 	bl	8001b04 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	0219      	lsls	r1, r3, #8
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2319      	movs	r3, #25
 8002380:	2201      	movs	r2, #1
 8002382:	f000 fb0b 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0e3      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2241      	movs	r2, #65	; 0x41
 8002392:	2121      	movs	r1, #33	; 0x21
 8002394:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2242      	movs	r2, #66	; 0x42
 800239a:	2140      	movs	r1, #64	; 0x40
 800239c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	222c      	movs	r2, #44	; 0x2c
 80023ae:	18ba      	adds	r2, r7, r2
 80023b0:	8812      	ldrh	r2, [r2, #0]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ba:	1dbb      	adds	r3, r7, #6
 80023bc:	881c      	ldrh	r4, [r3, #0]
 80023be:	2308      	movs	r3, #8
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	230a      	movs	r3, #10
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	8819      	ldrh	r1, [r3, #0]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	0023      	movs	r3, r4
 80023d6:	f000 f9f9 	bl	80027cc <I2C_RequestMemoryWrite>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d005      	beq.n	80023ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2240      	movs	r2, #64	; 0x40
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0b5      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2bff      	cmp	r3, #255	; 0xff
 80023f2:	d911      	bls.n	8002418 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	22ff      	movs	r2, #255	; 0xff
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	045c      	lsls	r4, r3, #17
 8002404:	230a      	movs	r3, #10
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	8819      	ldrh	r1, [r3, #0]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	0023      	movs	r3, r4
 8002412:	f000 fc7d 	bl	8002d10 <I2C_TransferConfig>
 8002416:	e012      	b.n	800243e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	b2da      	uxtb	r2, r3
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	049c      	lsls	r4, r3, #18
 800242c:	230a      	movs	r3, #10
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	8819      	ldrh	r1, [r3, #0]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	0023      	movs	r3, r4
 800243a:	f000 fc69 	bl	8002d10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 fae8 	bl	8002a1a <I2C_WaitOnTXISFlagUntilTimeout>
 800244a:	1e03      	subs	r3, r0, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e081      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03a      	beq.n	8002502 <HAL_I2C_Mem_Write+0x1fa>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d136      	bne.n	8002502 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	0013      	movs	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	f000 fa7b 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e053      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2bff      	cmp	r3, #255	; 0xff
 80024b6:	d911      	bls.n	80024dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	045c      	lsls	r4, r3, #17
 80024c8:	230a      	movs	r3, #10
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	8819      	ldrh	r1, [r3, #0]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	0023      	movs	r3, r4
 80024d6:	f000 fc1b 	bl	8002d10 <I2C_TransferConfig>
 80024da:	e012      	b.n	8002502 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	049c      	lsls	r4, r3, #18
 80024f0:	230a      	movs	r3, #10
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	8819      	ldrh	r1, [r3, #0]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	0023      	movs	r3, r4
 80024fe:	f000 fc07 	bl	8002d10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d198      	bne.n	800243e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 fac0 	bl	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e01a      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2220      	movs	r2, #32
 8002526:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	490b      	ldr	r1, [pc, #44]	; (8002560 <HAL_I2C_Mem_Write+0x258>)
 8002534:	400a      	ands	r2, r1
 8002536:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2241      	movs	r2, #65	; 0x41
 800253c:	2120      	movs	r1, #32
 800253e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2242      	movs	r2, #66	; 0x42
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002554:	2302      	movs	r3, #2
  }
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b007      	add	sp, #28
 800255c:	bd90      	pop	{r4, r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	000c      	movs	r4, r1
 800256e:	0010      	movs	r0, r2
 8002570:	0019      	movs	r1, r3
 8002572:	230a      	movs	r3, #10
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	1c22      	adds	r2, r4, #0
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	2308      	movs	r3, #8
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	1c02      	adds	r2, r0, #0
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	1dbb      	adds	r3, r7, #6
 8002584:	1c0a      	adds	r2, r1, #0
 8002586:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2241      	movs	r2, #65	; 0x41
 800258c:	5c9b      	ldrb	r3, [r3, r2]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b20      	cmp	r3, #32
 8002592:	d000      	beq.n	8002596 <HAL_I2C_Mem_Read+0x32>
 8002594:	e110      	b.n	80027b8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_I2C_Mem_Read+0x42>
 800259c:	232c      	movs	r3, #44	; 0x2c
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	0092      	lsls	r2, r2, #2
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e103      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x5c>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0fc      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	2101      	movs	r1, #1
 80025c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c8:	f7ff fa9c 	bl	8001b04 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	0219      	lsls	r1, r3, #8
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2319      	movs	r3, #25
 80025dc:	2201      	movs	r2, #1
 80025de:	f000 f9dd 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0e7      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2241      	movs	r2, #65	; 0x41
 80025ee:	2122      	movs	r1, #34	; 0x22
 80025f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2242      	movs	r2, #66	; 0x42
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	222c      	movs	r2, #44	; 0x2c
 800260a:	18ba      	adds	r2, r7, r2
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002616:	1dbb      	adds	r3, r7, #6
 8002618:	881c      	ldrh	r4, [r3, #0]
 800261a:	2308      	movs	r3, #8
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	230a      	movs	r3, #10
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	8819      	ldrh	r1, [r3, #0]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	0023      	movs	r3, r4
 8002632:	f000 f92f 	bl	8002894 <I2C_RequestMemoryRead>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d005      	beq.n	8002646 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2240      	movs	r2, #64	; 0x40
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0b9      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2bff      	cmp	r3, #255	; 0xff
 800264e:	d911      	bls.n	8002674 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	22ff      	movs	r2, #255	; 0xff
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	045c      	lsls	r4, r3, #17
 8002660:	230a      	movs	r3, #10
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	8819      	ldrh	r1, [r3, #0]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <HAL_I2C_Mem_Read+0x260>)
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	0023      	movs	r3, r4
 800266e:	f000 fb4f 	bl	8002d10 <I2C_TransferConfig>
 8002672:	e012      	b.n	800269a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	b2da      	uxtb	r2, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	049c      	lsls	r4, r3, #18
 8002688:	230a      	movs	r3, #10
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	8819      	ldrh	r1, [r3, #0]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_I2C_Mem_Read+0x260>)
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	0023      	movs	r3, r4
 8002696:	f000 fb3b 	bl	8002d10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	0013      	movs	r3, r2
 80026a4:	2200      	movs	r2, #0
 80026a6:	2104      	movs	r1, #4
 80026a8:	f000 f978 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e082      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d03a      	beq.n	8002766 <HAL_I2C_Mem_Read+0x202>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d136      	bne.n	8002766 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	0013      	movs	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	f000 f949 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e053      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	2bff      	cmp	r3, #255	; 0xff
 800271a:	d911      	bls.n	8002740 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	22ff      	movs	r2, #255	; 0xff
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	b2da      	uxtb	r2, r3
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	045c      	lsls	r4, r3, #17
 800272c:	230a      	movs	r3, #10
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	8819      	ldrh	r1, [r3, #0]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	2300      	movs	r3, #0
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	0023      	movs	r3, r4
 800273a:	f000 fae9 	bl	8002d10 <I2C_TransferConfig>
 800273e:	e012      	b.n	8002766 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	049c      	lsls	r4, r3, #18
 8002754:	230a      	movs	r3, #10
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	8819      	ldrh	r1, [r3, #0]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	2300      	movs	r3, #0
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	0023      	movs	r3, r4
 8002762:	f000 fad5 	bl	8002d10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d194      	bne.n	800269a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0018      	movs	r0, r3
 8002778:	f000 f98e 	bl	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e01a      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2220      	movs	r2, #32
 800278a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	490c      	ldr	r1, [pc, #48]	; (80027c8 <HAL_I2C_Mem_Read+0x264>)
 8002798:	400a      	ands	r2, r1
 800279a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2241      	movs	r2, #65	; 0x41
 80027a0:	2120      	movs	r1, #32
 80027a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2242      	movs	r2, #66	; 0x42
 80027a8:	2100      	movs	r1, #0
 80027aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b007      	add	sp, #28
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	80002400 	.word	0x80002400
 80027c8:	fe00e800 	.word	0xfe00e800

080027cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	000c      	movs	r4, r1
 80027d6:	0010      	movs	r0, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	250a      	movs	r5, #10
 80027dc:	197b      	adds	r3, r7, r5
 80027de:	1c22      	adds	r2, r4, #0
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	2308      	movs	r3, #8
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	1c02      	adds	r2, r0, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	1dbb      	adds	r3, r7, #6
 80027ec:	1c0a      	adds	r2, r1, #0
 80027ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	045c      	lsls	r4, r3, #17
 80027fa:	197b      	adds	r3, r7, r5
 80027fc:	8819      	ldrh	r1, [r3, #0]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	4b23      	ldr	r3, [pc, #140]	; (8002890 <I2C_RequestMemoryWrite+0xc4>)
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	0023      	movs	r3, r4
 8002806:	f000 fa83 	bl	8002d10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	6a39      	ldr	r1, [r7, #32]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f902 	bl	8002a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e033      	b.n	8002886 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800281e:	1dbb      	adds	r3, r7, #6
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	2308      	movs	r3, #8
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
 8002834:	e019      	b.n	800286a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002836:	2308      	movs	r3, #8
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	b29b      	uxth	r3, r3
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	6a39      	ldr	r1, [r7, #32]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 f8e3 	bl	8002a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e014      	b.n	8002886 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800285c:	2308      	movs	r3, #8
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	0013      	movs	r3, r2
 8002874:	2200      	movs	r2, #0
 8002876:	2180      	movs	r1, #128	; 0x80
 8002878:	f000 f890 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bdb0      	pop	{r4, r5, r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	80002000 	.word	0x80002000

08002894 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002894:	b5b0      	push	{r4, r5, r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	000c      	movs	r4, r1
 800289e:	0010      	movs	r0, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	250a      	movs	r5, #10
 80028a4:	197b      	adds	r3, r7, r5
 80028a6:	1c22      	adds	r2, r4, #0
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	2308      	movs	r3, #8
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	1c02      	adds	r2, r0, #0
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	1dbb      	adds	r3, r7, #6
 80028b4:	1c0a      	adds	r2, r1, #0
 80028b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	197b      	adds	r3, r7, r5
 80028c0:	8819      	ldrh	r1, [r3, #0]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	4b23      	ldr	r3, [pc, #140]	; (8002954 <I2C_RequestMemoryRead+0xc0>)
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2300      	movs	r3, #0
 80028ca:	f000 fa21 	bl	8002d10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	6a39      	ldr	r1, [r7, #32]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 f8a0 	bl	8002a1a <I2C_WaitOnTXISFlagUntilTimeout>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e033      	b.n	800294a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e2:	1dbb      	adds	r3, r7, #6
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ea:	2308      	movs	r3, #8
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
 80028f8:	e019      	b.n	800292e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028fa:	2308      	movs	r3, #8
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	b29b      	uxth	r3, r3
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290e:	6a39      	ldr	r1, [r7, #32]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f881 	bl	8002a1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d001      	beq.n	8002920 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e014      	b.n	800294a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002920:	2308      	movs	r3, #8
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	0013      	movs	r3, r2
 8002938:	2200      	movs	r2, #0
 800293a:	2140      	movs	r1, #64	; 0x40
 800293c:	f000 f82e 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d001      	beq.n	8002948 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bdb0      	pop	{r4, r5, r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	80002000 	.word	0x80002000

08002958 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d103      	bne.n	8002976 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2201      	movs	r2, #1
 800297e:	4013      	ands	r3, r2
 8002980:	2b01      	cmp	r3, #1
 8002982:	d007      	beq.n	8002994 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
  }
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ac:	e021      	b.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	d01e      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b4:	f7ff f8a6 	bl	8001b04 <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d302      	bcc.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x2e>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d113      	bne.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	2220      	movs	r2, #32
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2241      	movs	r2, #65	; 0x41
 80029da:	2120      	movs	r1, #32
 80029dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2242      	movs	r2, #66	; 0x42
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2240      	movs	r2, #64	; 0x40
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00f      	b.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	425a      	negs	r2, r3
 8002a02:	4153      	adcs	r3, r2
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	001a      	movs	r2, r3
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d0ce      	beq.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b004      	add	sp, #16
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a26:	e02b      	b.n	8002a80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f86e 	bl	8002b10 <I2C_IsErrorOccurred>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e029      	b.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	d01e      	beq.n	8002a80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f85f 	bl	8001b04 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d113      	bne.n	8002a80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2241      	movs	r2, #65	; 0x41
 8002a68:	2120      	movs	r1, #32
 8002a6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2242      	movs	r2, #66	; 0x42
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e007      	b.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2202      	movs	r2, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d1cc      	bne.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa4:	e028      	b.n	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f82f 	bl	8002b10 <I2C_IsErrorOccurred>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e026      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7ff f823 	bl	8001b04 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d113      	bne.n	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2241      	movs	r2, #65	; 0x41
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2242      	movs	r2, #66	; 0x42
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2240      	movs	r2, #64	; 0x40
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2220      	movs	r2, #32
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d1cf      	bne.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b004      	add	sp, #16
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b08b      	sub	sp, #44	; 0x2c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1c:	2327      	movs	r3, #39	; 0x27
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2210      	movs	r2, #16
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d100      	bne.n	8002b3e <I2C_IsErrorOccurred+0x2e>
 8002b3c:	e082      	b.n	8002c44 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2210      	movs	r2, #16
 8002b44:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b46:	e060      	b.n	8002c0a <I2C_IsErrorOccurred+0xfa>
 8002b48:	2427      	movs	r4, #39	; 0x27
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	193a      	adds	r2, r7, r4
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3301      	adds	r3, #1
 8002b56:	d058      	beq.n	8002c0a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b58:	f7fe ffd4 	bl	8001b04 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d306      	bcc.n	8002b76 <I2C_IsErrorOccurred+0x66>
 8002b68:	193b      	adds	r3, r7, r4
 8002b6a:	193a      	adds	r2, r7, r4
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d149      	bne.n	8002c0a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	01db      	lsls	r3, r3, #7
 8002b80:	4013      	ands	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b84:	2013      	movs	r0, #19
 8002b86:	183b      	adds	r3, r7, r0
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	2142      	movs	r1, #66	; 0x42
 8002b8c:	5c52      	ldrb	r2, [r2, r1]
 8002b8e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d126      	bne.n	8002bf2 <I2C_IsErrorOccurred+0xe2>
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	01db      	lsls	r3, r3, #7
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d021      	beq.n	8002bf2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d01d      	beq.n	8002bf2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	01c9      	lsls	r1, r1, #7
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bc8:	f7fe ff9c 	bl	8001b04 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd0:	e00f      	b.n	8002bf2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bd2:	f7fe ff97 	bl	8001b04 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b19      	cmp	r3, #25
 8002bde:	d908      	bls.n	8002bf2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2220      	movs	r2, #32
 8002be4:	4313      	orrs	r3, r2
 8002be6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002be8:	2327      	movs	r3, #39	; 0x27
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]

              break;
 8002bf0:	e00b      	b.n	8002c0a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2127      	movs	r1, #39	; 0x27
 8002bfe:	187a      	adds	r2, r7, r1
 8002c00:	1879      	adds	r1, r7, r1
 8002c02:	7809      	ldrb	r1, [r1, #0]
 8002c04:	7011      	strb	r1, [r2, #0]
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d1e3      	bne.n	8002bd2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2220      	movs	r2, #32
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d004      	beq.n	8002c22 <I2C_IsErrorOccurred+0x112>
 8002c18:	2327      	movs	r3, #39	; 0x27
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d092      	beq.n	8002b48 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c22:	2327      	movs	r3, #39	; 0x27
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2220      	movs	r2, #32
 8002c32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	2204      	movs	r2, #4
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c3c:	2327      	movs	r3, #39	; 0x27
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d00c      	beq.n	8002c70 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	0052      	lsls	r2, r2, #1
 8002c66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c68:	2327      	movs	r3, #39	; 0x27
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4013      	ands	r3, r2
 8002c78:	d00c      	beq.n	8002c94 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	00d2      	lsls	r2, r2, #3
 8002c8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c8c:	2327      	movs	r3, #39	; 0x27
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d00c      	beq.n	8002cb8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cb0:	2327      	movs	r3, #39	; 0x27
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002cb8:	2327      	movs	r3, #39	; 0x27
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01d      	beq.n	8002cfe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7ff fe47 	bl	8002958 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	490d      	ldr	r1, [pc, #52]	; (8002d0c <I2C_IsErrorOccurred+0x1fc>)
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2241      	movs	r2, #65	; 0x41
 8002cea:	2120      	movs	r1, #32
 8002cec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2242      	movs	r2, #66	; 0x42
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002cfe:	2327      	movs	r3, #39	; 0x27
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	781b      	ldrb	r3, [r3, #0]
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b00b      	add	sp, #44	; 0x2c
 8002d0a:	bd90      	pop	{r4, r7, pc}
 8002d0c:	fe00e800 	.word	0xfe00e800

08002d10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	0008      	movs	r0, r1
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	240a      	movs	r4, #10
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	1c02      	adds	r2, r0, #0
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	2009      	movs	r0, #9
 8002d28:	183b      	adds	r3, r7, r0
 8002d2a:	1c0a      	adds	r2, r1, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	059b      	lsls	r3, r3, #22
 8002d34:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	0419      	lsls	r1, r3, #16
 8002d3c:	23ff      	movs	r3, #255	; 0xff
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d42:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5a:	0d51      	lsrs	r1, r2, #21
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	00d2      	lsls	r2, r2, #3
 8002d60:	400a      	ands	r2, r1
 8002d62:	4907      	ldr	r1, [pc, #28]	; (8002d80 <I2C_TransferConfig+0x70>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	43d2      	mvns	r2, r2
 8002d68:	401a      	ands	r2, r3
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b007      	add	sp, #28
 8002d7c:	bd90      	pop	{r4, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	03ff63ff 	.word	0x03ff63ff

08002d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2241      	movs	r2, #65	; 0x41
 8002d92:	5c9b      	ldrb	r3, [r3, r2]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d138      	bne.n	8002e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	5c9b      	ldrb	r3, [r3, r2]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e032      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2240      	movs	r2, #64	; 0x40
 8002dac:	2101      	movs	r1, #1
 8002dae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2241      	movs	r2, #65	; 0x41
 8002db4:	2124      	movs	r1, #36	; 0x24
 8002db6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	438a      	bics	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4911      	ldr	r1, [pc, #68]	; (8002e18 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2101      	movs	r1, #1
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2241      	movs	r2, #65	; 0x41
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	2100      	movs	r1, #0
 8002e06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	ffffefff 	.word	0xffffefff

08002e1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2241      	movs	r2, #65	; 0x41
 8002e2a:	5c9b      	ldrb	r3, [r3, r2]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d139      	bne.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2240      	movs	r2, #64	; 0x40
 8002e36:	5c9b      	ldrb	r3, [r3, r2]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e033      	b.n	8002ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2240      	movs	r2, #64	; 0x40
 8002e44:	2101      	movs	r1, #1
 8002e46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2241      	movs	r2, #65	; 0x41
 8002e4c:	2124      	movs	r1, #36	; 0x24
 8002e4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	438a      	bics	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2241      	movs	r2, #65	; 0x41
 8002e96:	2120      	movs	r1, #32
 8002e98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b004      	add	sp, #16
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	fffff0ff 	.word	0xfffff0ff

08002eb4 <LL_RCC_GetAPB1Prescaler>:
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	23e0      	movs	r3, #224	; 0xe0
 8002ebe:	01db      	lsls	r3, r3, #7
 8002ec0:	4013      	ands	r3, r2
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2238      	movs	r2, #56	; 0x38
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d10f      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0adb      	lsrs	r3, r3, #11
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	0013      	movs	r3, r2
 8002eec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	4835      	ldr	r0, [pc, #212]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ef2:	f7fd f907 	bl	8000104 <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e05d      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002efc:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2238      	movs	r2, #56	; 0x38
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f08:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x100>)
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2238      	movs	r2, #56	; 0x38
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d138      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d10d      	bne.n	8002f54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	4824      	ldr	r0, [pc, #144]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x100>)
 8002f3c:	f7fd f8e2 	bl	8000104 <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	0019      	movs	r1, r3
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	227f      	movs	r2, #127	; 0x7f
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	434b      	muls	r3, r1
 8002f50:	617b      	str	r3, [r7, #20]
        break;
 8002f52:	e00d      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	481c      	ldr	r0, [pc, #112]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f58:	f7fd f8d4 	bl	8000104 <__udivsi3>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	0019      	movs	r1, r3
 8002f60:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	227f      	movs	r2, #127	; 0x7f
 8002f68:	4013      	ands	r3, r2
 8002f6a:	434b      	muls	r3, r1
 8002f6c:	617b      	str	r3, [r7, #20]
        break;
 8002f6e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0f5b      	lsrs	r3, r3, #29
 8002f76:	2207      	movs	r2, #7
 8002f78:	4013      	ands	r3, r2
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	6978      	ldr	r0, [r7, #20]
 8002f82:	f7fd f8bf 	bl	8000104 <__udivsi3>
 8002f86:	0003      	movs	r3, r0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e015      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2238      	movs	r2, #56	; 0x38
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d103      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2238      	movs	r2, #56	; 0x38
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b18      	cmp	r3, #24
 8002faa:	d103      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fac:	23fa      	movs	r3, #250	; 0xfa
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fb8:	693b      	ldr	r3, [r7, #16]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	00f42400 	.word	0x00f42400
 8002fcc:	007a1200 	.word	0x007a1200

08002fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	; (8002fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	20000000 	.word	0x20000000

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fe8:	f7ff fff2 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002fec:	0004      	movs	r4, r0
 8002fee:	f7ff ff61 	bl	8002eb4 <LL_RCC_GetAPB1Prescaler>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	0b1a      	lsrs	r2, r3, #12
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	58d3      	ldr	r3, [r2, r3]
 8002ffc:	221f      	movs	r2, #31
 8002ffe:	4013      	ands	r3, r2
 8003000:	40dc      	lsrs	r4, r3
 8003002:	0023      	movs	r3, r4
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bdb0      	pop	{r4, r5, r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	080048dc 	.word	0x080048dc

08003010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e04a      	b.n	80030b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223d      	movs	r2, #61	; 0x3d
 8003026:	5c9b      	ldrb	r3, [r3, r2]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	223c      	movs	r2, #60	; 0x3c
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7fe f82f 	bl	800109c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223d      	movs	r2, #61	; 0x3d
 8003042:	2102      	movs	r1, #2
 8003044:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	0019      	movs	r1, r3
 8003050:	0010      	movs	r0, r2
 8003052:	f000 f90b 	bl	800326c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2248      	movs	r2, #72	; 0x48
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	223e      	movs	r2, #62	; 0x3e
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	223f      	movs	r2, #63	; 0x3f
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2240      	movs	r2, #64	; 0x40
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2241      	movs	r2, #65	; 0x41
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2242      	movs	r2, #66	; 0x42
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2243      	movs	r2, #67	; 0x43
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2244      	movs	r2, #68	; 0x44
 8003092:	2101      	movs	r1, #1
 8003094:	5499      	strb	r1, [r3, r2]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2245      	movs	r2, #69	; 0x45
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2246      	movs	r2, #70	; 0x46
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2247      	movs	r2, #71	; 0x47
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	223d      	movs	r2, #61	; 0x3d
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	230f      	movs	r3, #15
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223c      	movs	r2, #60	; 0x3c
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIM_ConfigClockSource+0x20>
 80030dc:	2302      	movs	r3, #2
 80030de:	e0bc      	b.n	800325a <HAL_TIM_ConfigClockSource+0x19a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	223c      	movs	r2, #60	; 0x3c
 80030e4:	2101      	movs	r1, #1
 80030e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	223d      	movs	r2, #61	; 0x3d
 80030ec:	2102      	movs	r1, #2
 80030ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4a5a      	ldr	r2, [pc, #360]	; (8003264 <HAL_TIM_ConfigClockSource+0x1a4>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4a59      	ldr	r2, [pc, #356]	; (8003268 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	0192      	lsls	r2, r2, #6
 8003118:	4293      	cmp	r3, r2
 800311a:	d040      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xde>
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	0192      	lsls	r2, r2, #6
 8003120:	4293      	cmp	r3, r2
 8003122:	d900      	bls.n	8003126 <HAL_TIM_ConfigClockSource+0x66>
 8003124:	e088      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	0152      	lsls	r2, r2, #5
 800312a:	4293      	cmp	r3, r2
 800312c:	d100      	bne.n	8003130 <HAL_TIM_ConfigClockSource+0x70>
 800312e:	e088      	b.n	8003242 <HAL_TIM_ConfigClockSource+0x182>
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	0152      	lsls	r2, r2, #5
 8003134:	4293      	cmp	r3, r2
 8003136:	d900      	bls.n	800313a <HAL_TIM_ConfigClockSource+0x7a>
 8003138:	e07e      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 800313a:	2b70      	cmp	r3, #112	; 0x70
 800313c:	d018      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0xb0>
 800313e:	d900      	bls.n	8003142 <HAL_TIM_ConfigClockSource+0x82>
 8003140:	e07a      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 8003142:	2b60      	cmp	r3, #96	; 0x60
 8003144:	d04f      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x126>
 8003146:	d900      	bls.n	800314a <HAL_TIM_ConfigClockSource+0x8a>
 8003148:	e076      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 800314a:	2b50      	cmp	r3, #80	; 0x50
 800314c:	d03b      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x106>
 800314e:	d900      	bls.n	8003152 <HAL_TIM_ConfigClockSource+0x92>
 8003150:	e072      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d057      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x146>
 8003156:	d900      	bls.n	800315a <HAL_TIM_ConfigClockSource+0x9a>
 8003158:	e06e      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 800315a:	2b30      	cmp	r3, #48	; 0x30
 800315c:	d063      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x166>
 800315e:	d86b      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 8003160:	2b20      	cmp	r3, #32
 8003162:	d060      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x166>
 8003164:	d868      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d05d      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x166>
 800316a:	2b10      	cmp	r3, #16
 800316c:	d05b      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x166>
 800316e:	e063      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f000 f97a 	bl	8003478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2277      	movs	r2, #119	; 0x77
 8003190:	4313      	orrs	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
      break;
 800319c:	e052      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f000 f963 	bl	8003478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	01c9      	lsls	r1, r1, #7
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
      break;
 80031c4:	e03e      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	001a      	movs	r2, r3
 80031d4:	f000 f8d4 	bl	8003380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2150      	movs	r1, #80	; 0x50
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 f92e 	bl	8003440 <TIM_ITRx_SetConfig>
      break;
 80031e4:	e02e      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	001a      	movs	r2, r3
 80031f4:	f000 f8f2 	bl	80033dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2160      	movs	r1, #96	; 0x60
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 f91e 	bl	8003440 <TIM_ITRx_SetConfig>
      break;
 8003204:	e01e      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	001a      	movs	r2, r3
 8003214:	f000 f8b4 	bl	8003380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	0018      	movs	r0, r3
 8003220:	f000 f90e 	bl	8003440 <TIM_ITRx_SetConfig>
      break;
 8003224:	e00e      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0019      	movs	r1, r3
 8003230:	0010      	movs	r0, r2
 8003232:	f000 f905 	bl	8003440 <TIM_ITRx_SetConfig>
      break;
 8003236:	e005      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003238:	230f      	movs	r3, #15
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
      break;
 8003240:	e000      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003242:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	223d      	movs	r2, #61	; 0x3d
 8003248:	2101      	movs	r1, #1
 800324a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	223c      	movs	r2, #60	; 0x3c
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

  return status;
 8003254:	230f      	movs	r3, #15
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	781b      	ldrb	r3, [r3, #0]
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	ffceff88 	.word	0xffceff88
 8003268:	ffff00ff 	.word	0xffff00ff

0800326c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a38      	ldr	r2, [pc, #224]	; (8003360 <TIM_Base_SetConfig+0xf4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00c      	beq.n	800329e <TIM_Base_SetConfig+0x32>
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	05db      	lsls	r3, r3, #23
 800328a:	429a      	cmp	r2, r3
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0x32>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a34      	ldr	r2, [pc, #208]	; (8003364 <TIM_Base_SetConfig+0xf8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x32>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a33      	ldr	r2, [pc, #204]	; (8003368 <TIM_Base_SetConfig+0xfc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2270      	movs	r2, #112	; 0x70
 80032a2:	4393      	bics	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <TIM_Base_SetConfig+0xf4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01c      	beq.n	80032f2 <TIM_Base_SetConfig+0x86>
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	429a      	cmp	r2, r3
 80032c0:	d017      	beq.n	80032f2 <TIM_Base_SetConfig+0x86>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a27      	ldr	r2, [pc, #156]	; (8003364 <TIM_Base_SetConfig+0xf8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0x86>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <TIM_Base_SetConfig+0xfc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0x86>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a25      	ldr	r2, [pc, #148]	; (800336c <TIM_Base_SetConfig+0x100>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0x86>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a24      	ldr	r2, [pc, #144]	; (8003370 <TIM_Base_SetConfig+0x104>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0x86>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <TIM_Base_SetConfig+0x108>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x86>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a22      	ldr	r2, [pc, #136]	; (8003378 <TIM_Base_SetConfig+0x10c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a21      	ldr	r2, [pc, #132]	; (800337c <TIM_Base_SetConfig+0x110>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	4393      	bics	r3, r2
 800330a:	001a      	movs	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <TIM_Base_SetConfig+0xf4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0xde>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <TIM_Base_SetConfig+0x104>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0xde>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <TIM_Base_SetConfig+0x108>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0xde>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <TIM_Base_SetConfig+0x10c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d103      	bne.n	8003352 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	615a      	str	r2, [r3, #20]
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40002000 	.word	0x40002000
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800
 800337c:	fffffcff 	.word	0xfffffcff

08003380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	2201      	movs	r2, #1
 8003398:	4393      	bics	r3, r2
 800339a:	001a      	movs	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	22f0      	movs	r2, #240	; 0xf0
 80033aa:	4393      	bics	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	220a      	movs	r2, #10
 80033bc:	4393      	bics	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	621a      	str	r2, [r3, #32]
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b006      	add	sp, #24
 80033da:	bd80      	pop	{r7, pc}

080033dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	2210      	movs	r2, #16
 80033ee:	4393      	bics	r3, r2
 80033f0:	001a      	movs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <TIM_TI2_ConfigInputStage+0x60>)
 8003406:	4013      	ands	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	031b      	lsls	r3, r3, #12
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	22a0      	movs	r2, #160	; 0xa0
 8003418:	4393      	bics	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b006      	add	sp, #24
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	ffff0fff 	.word	0xffff0fff

08003440 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a08      	ldr	r2, [pc, #32]	; (8003474 <TIM_ITRx_SetConfig+0x34>)
 8003454:	4013      	ands	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	2207      	movs	r2, #7
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b004      	add	sp, #16
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	ffcfff8f 	.word	0xffcfff8f

08003478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <TIM_ETR_SetConfig+0x3c>)
 8003490:	4013      	ands	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	431a      	orrs	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b006      	add	sp, #24
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	ffff00ff 	.word	0xffff00ff

080034b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223c      	movs	r2, #60	; 0x3c
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e05a      	b.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	223c      	movs	r2, #60	; 0x3c
 80034d4:	2101      	movs	r1, #1
 80034d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	223d      	movs	r2, #61	; 0x3d
 80034dc:	2102      	movs	r1, #2
 80034de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a26      	ldr	r2, [pc, #152]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034fe:	4013      	ands	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2270      	movs	r2, #112	; 0x70
 8003510:	4393      	bics	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d014      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	429a      	cmp	r2, r3
 800353a:	d00e      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a15      	ldr	r2, [pc, #84]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a14      	ldr	r2, [pc, #80]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10c      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	4393      	bics	r3, r2
 8003560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	223d      	movs	r2, #61	; 0x3d
 8003578:	2101      	movs	r1, #1
 800357a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	223c      	movs	r2, #60	; 0x3c
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	40012c00 	.word	0x40012c00
 8003594:	ff0fffff 	.word	0xff0fffff
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40014000 	.word	0x40014000

080035a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e046      	b.n	8003644 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2288      	movs	r2, #136	; 0x88
 80035ba:	589b      	ldr	r3, [r3, r2]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2284      	movs	r2, #132	; 0x84
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd fd96 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2288      	movs	r2, #136	; 0x88
 80035d4:	2124      	movs	r1, #36	; 0x24
 80035d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2101      	movs	r1, #1
 80035e4:	438a      	bics	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f830 	bl	8003650 <UART_SetConfig>
 80035f0:	0003      	movs	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e024      	b.n	8003644 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 fb79 	bl	8003cfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	490d      	ldr	r1, [pc, #52]	; (800364c <HAL_UART_Init+0xa8>)
 8003616:	400a      	ands	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	212a      	movs	r1, #42	; 0x2a
 8003626:	438a      	bics	r2, r1
 8003628:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 fc11 	bl	8003e64 <UART_CheckIdleState>
 8003642:	0003      	movs	r3, r0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}
 800364c:	ffffb7ff 	.word	0xffffb7ff

08003650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	b090      	sub	sp, #64	; 0x40
 8003654:	af00      	add	r7, sp, #0
 8003656:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003658:	231a      	movs	r3, #26
 800365a:	2220      	movs	r2, #32
 800365c:	189b      	adds	r3, r3, r2
 800365e:	19db      	adds	r3, r3, r7
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	431a      	orrs	r2, r3
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	431a      	orrs	r2, r3
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4313      	orrs	r3, r2
 800367a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4ac1      	ldr	r2, [pc, #772]	; (8003988 <UART_SetConfig+0x338>)
 8003684:	4013      	ands	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	430b      	orrs	r3, r1
 8003690:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4abc      	ldr	r2, [pc, #752]	; (800398c <UART_SetConfig+0x33c>)
 800369a:	4013      	ands	r3, r2
 800369c:	0018      	movs	r0, r3
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	0003      	movs	r3, r0
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4ab6      	ldr	r2, [pc, #728]	; (8003990 <UART_SetConfig+0x340>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d009      	beq.n	80036d0 <UART_SetConfig+0x80>
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4ab4      	ldr	r2, [pc, #720]	; (8003994 <UART_SetConfig+0x344>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036cc:	4313      	orrs	r3, r2
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4ab0      	ldr	r2, [pc, #704]	; (8003998 <UART_SetConfig+0x348>)
 80036d8:	4013      	ands	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e2:	430b      	orrs	r3, r1
 80036e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	220f      	movs	r2, #15
 80036ee:	4393      	bics	r3, r2
 80036f0:	0018      	movs	r0, r3
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	0003      	movs	r3, r0
 80036fc:	430b      	orrs	r3, r1
 80036fe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4aa5      	ldr	r2, [pc, #660]	; (800399c <UART_SetConfig+0x34c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d131      	bne.n	800376e <UART_SetConfig+0x11e>
 800370a:	4ba5      	ldr	r3, [pc, #660]	; (80039a0 <UART_SetConfig+0x350>)
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	2203      	movs	r2, #3
 8003710:	4013      	ands	r3, r2
 8003712:	2b03      	cmp	r3, #3
 8003714:	d01d      	beq.n	8003752 <UART_SetConfig+0x102>
 8003716:	d823      	bhi.n	8003760 <UART_SetConfig+0x110>
 8003718:	2b02      	cmp	r3, #2
 800371a:	d00c      	beq.n	8003736 <UART_SetConfig+0xe6>
 800371c:	d820      	bhi.n	8003760 <UART_SetConfig+0x110>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <UART_SetConfig+0xd8>
 8003722:	2b01      	cmp	r3, #1
 8003724:	d00e      	beq.n	8003744 <UART_SetConfig+0xf4>
 8003726:	e01b      	b.n	8003760 <UART_SetConfig+0x110>
 8003728:	231b      	movs	r3, #27
 800372a:	2220      	movs	r2, #32
 800372c:	189b      	adds	r3, r3, r2
 800372e:	19db      	adds	r3, r3, r7
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e154      	b.n	80039e0 <UART_SetConfig+0x390>
 8003736:	231b      	movs	r3, #27
 8003738:	2220      	movs	r2, #32
 800373a:	189b      	adds	r3, r3, r2
 800373c:	19db      	adds	r3, r3, r7
 800373e:	2202      	movs	r2, #2
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e14d      	b.n	80039e0 <UART_SetConfig+0x390>
 8003744:	231b      	movs	r3, #27
 8003746:	2220      	movs	r2, #32
 8003748:	189b      	adds	r3, r3, r2
 800374a:	19db      	adds	r3, r3, r7
 800374c:	2204      	movs	r2, #4
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e146      	b.n	80039e0 <UART_SetConfig+0x390>
 8003752:	231b      	movs	r3, #27
 8003754:	2220      	movs	r2, #32
 8003756:	189b      	adds	r3, r3, r2
 8003758:	19db      	adds	r3, r3, r7
 800375a:	2208      	movs	r2, #8
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e13f      	b.n	80039e0 <UART_SetConfig+0x390>
 8003760:	231b      	movs	r3, #27
 8003762:	2220      	movs	r2, #32
 8003764:	189b      	adds	r3, r3, r2
 8003766:	19db      	adds	r3, r3, r7
 8003768:	2210      	movs	r2, #16
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	e138      	b.n	80039e0 <UART_SetConfig+0x390>
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a8c      	ldr	r2, [pc, #560]	; (80039a4 <UART_SetConfig+0x354>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d131      	bne.n	80037dc <UART_SetConfig+0x18c>
 8003778:	4b89      	ldr	r3, [pc, #548]	; (80039a0 <UART_SetConfig+0x350>)
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	220c      	movs	r2, #12
 800377e:	4013      	ands	r3, r2
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d01d      	beq.n	80037c0 <UART_SetConfig+0x170>
 8003784:	d823      	bhi.n	80037ce <UART_SetConfig+0x17e>
 8003786:	2b08      	cmp	r3, #8
 8003788:	d00c      	beq.n	80037a4 <UART_SetConfig+0x154>
 800378a:	d820      	bhi.n	80037ce <UART_SetConfig+0x17e>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <UART_SetConfig+0x146>
 8003790:	2b04      	cmp	r3, #4
 8003792:	d00e      	beq.n	80037b2 <UART_SetConfig+0x162>
 8003794:	e01b      	b.n	80037ce <UART_SetConfig+0x17e>
 8003796:	231b      	movs	r3, #27
 8003798:	2220      	movs	r2, #32
 800379a:	189b      	adds	r3, r3, r2
 800379c:	19db      	adds	r3, r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e11d      	b.n	80039e0 <UART_SetConfig+0x390>
 80037a4:	231b      	movs	r3, #27
 80037a6:	2220      	movs	r2, #32
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	2202      	movs	r2, #2
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e116      	b.n	80039e0 <UART_SetConfig+0x390>
 80037b2:	231b      	movs	r3, #27
 80037b4:	2220      	movs	r2, #32
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	19db      	adds	r3, r3, r7
 80037ba:	2204      	movs	r2, #4
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e10f      	b.n	80039e0 <UART_SetConfig+0x390>
 80037c0:	231b      	movs	r3, #27
 80037c2:	2220      	movs	r2, #32
 80037c4:	189b      	adds	r3, r3, r2
 80037c6:	19db      	adds	r3, r3, r7
 80037c8:	2208      	movs	r2, #8
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e108      	b.n	80039e0 <UART_SetConfig+0x390>
 80037ce:	231b      	movs	r3, #27
 80037d0:	2220      	movs	r2, #32
 80037d2:	189b      	adds	r3, r3, r2
 80037d4:	19db      	adds	r3, r3, r7
 80037d6:	2210      	movs	r2, #16
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e101      	b.n	80039e0 <UART_SetConfig+0x390>
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a71      	ldr	r2, [pc, #452]	; (80039a8 <UART_SetConfig+0x358>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d131      	bne.n	800384a <UART_SetConfig+0x1fa>
 80037e6:	4b6e      	ldr	r3, [pc, #440]	; (80039a0 <UART_SetConfig+0x350>)
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2230      	movs	r2, #48	; 0x30
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b30      	cmp	r3, #48	; 0x30
 80037f0:	d01d      	beq.n	800382e <UART_SetConfig+0x1de>
 80037f2:	d823      	bhi.n	800383c <UART_SetConfig+0x1ec>
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d00c      	beq.n	8003812 <UART_SetConfig+0x1c2>
 80037f8:	d820      	bhi.n	800383c <UART_SetConfig+0x1ec>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <UART_SetConfig+0x1b4>
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d00e      	beq.n	8003820 <UART_SetConfig+0x1d0>
 8003802:	e01b      	b.n	800383c <UART_SetConfig+0x1ec>
 8003804:	231b      	movs	r3, #27
 8003806:	2220      	movs	r2, #32
 8003808:	189b      	adds	r3, r3, r2
 800380a:	19db      	adds	r3, r3, r7
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e0e6      	b.n	80039e0 <UART_SetConfig+0x390>
 8003812:	231b      	movs	r3, #27
 8003814:	2220      	movs	r2, #32
 8003816:	189b      	adds	r3, r3, r2
 8003818:	19db      	adds	r3, r3, r7
 800381a:	2202      	movs	r2, #2
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e0df      	b.n	80039e0 <UART_SetConfig+0x390>
 8003820:	231b      	movs	r3, #27
 8003822:	2220      	movs	r2, #32
 8003824:	189b      	adds	r3, r3, r2
 8003826:	19db      	adds	r3, r3, r7
 8003828:	2204      	movs	r2, #4
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	e0d8      	b.n	80039e0 <UART_SetConfig+0x390>
 800382e:	231b      	movs	r3, #27
 8003830:	2220      	movs	r2, #32
 8003832:	189b      	adds	r3, r3, r2
 8003834:	19db      	adds	r3, r3, r7
 8003836:	2208      	movs	r2, #8
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	e0d1      	b.n	80039e0 <UART_SetConfig+0x390>
 800383c:	231b      	movs	r3, #27
 800383e:	2220      	movs	r2, #32
 8003840:	189b      	adds	r3, r3, r2
 8003842:	19db      	adds	r3, r3, r7
 8003844:	2210      	movs	r2, #16
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e0ca      	b.n	80039e0 <UART_SetConfig+0x390>
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a57      	ldr	r2, [pc, #348]	; (80039ac <UART_SetConfig+0x35c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d106      	bne.n	8003862 <UART_SetConfig+0x212>
 8003854:	231b      	movs	r3, #27
 8003856:	2220      	movs	r2, #32
 8003858:	189b      	adds	r3, r3, r2
 800385a:	19db      	adds	r3, r3, r7
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e0be      	b.n	80039e0 <UART_SetConfig+0x390>
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a52      	ldr	r2, [pc, #328]	; (80039b0 <UART_SetConfig+0x360>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d106      	bne.n	800387a <UART_SetConfig+0x22a>
 800386c:	231b      	movs	r3, #27
 800386e:	2220      	movs	r2, #32
 8003870:	189b      	adds	r3, r3, r2
 8003872:	19db      	adds	r3, r3, r7
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e0b2      	b.n	80039e0 <UART_SetConfig+0x390>
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4d      	ldr	r2, [pc, #308]	; (80039b4 <UART_SetConfig+0x364>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d106      	bne.n	8003892 <UART_SetConfig+0x242>
 8003884:	231b      	movs	r3, #27
 8003886:	2220      	movs	r2, #32
 8003888:	189b      	adds	r3, r3, r2
 800388a:	19db      	adds	r3, r3, r7
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e0a6      	b.n	80039e0 <UART_SetConfig+0x390>
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3e      	ldr	r2, [pc, #248]	; (8003990 <UART_SetConfig+0x340>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d13e      	bne.n	800391a <UART_SetConfig+0x2ca>
 800389c:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <UART_SetConfig+0x350>)
 800389e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038a0:	23c0      	movs	r3, #192	; 0xc0
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4013      	ands	r3, r2
 80038a6:	22c0      	movs	r2, #192	; 0xc0
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d027      	beq.n	80038fe <UART_SetConfig+0x2ae>
 80038ae:	22c0      	movs	r2, #192	; 0xc0
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d82a      	bhi.n	800390c <UART_SetConfig+0x2bc>
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d011      	beq.n	80038e2 <UART_SetConfig+0x292>
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d822      	bhi.n	800390c <UART_SetConfig+0x2bc>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <UART_SetConfig+0x284>
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	00d2      	lsls	r2, r2, #3
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00e      	beq.n	80038f0 <UART_SetConfig+0x2a0>
 80038d2:	e01b      	b.n	800390c <UART_SetConfig+0x2bc>
 80038d4:	231b      	movs	r3, #27
 80038d6:	2220      	movs	r2, #32
 80038d8:	189b      	adds	r3, r3, r2
 80038da:	19db      	adds	r3, r3, r7
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e07e      	b.n	80039e0 <UART_SetConfig+0x390>
 80038e2:	231b      	movs	r3, #27
 80038e4:	2220      	movs	r2, #32
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	19db      	adds	r3, r3, r7
 80038ea:	2202      	movs	r2, #2
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e077      	b.n	80039e0 <UART_SetConfig+0x390>
 80038f0:	231b      	movs	r3, #27
 80038f2:	2220      	movs	r2, #32
 80038f4:	189b      	adds	r3, r3, r2
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	2204      	movs	r2, #4
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e070      	b.n	80039e0 <UART_SetConfig+0x390>
 80038fe:	231b      	movs	r3, #27
 8003900:	2220      	movs	r2, #32
 8003902:	189b      	adds	r3, r3, r2
 8003904:	19db      	adds	r3, r3, r7
 8003906:	2208      	movs	r2, #8
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e069      	b.n	80039e0 <UART_SetConfig+0x390>
 800390c:	231b      	movs	r3, #27
 800390e:	2220      	movs	r2, #32
 8003910:	189b      	adds	r3, r3, r2
 8003912:	19db      	adds	r3, r3, r7
 8003914:	2210      	movs	r2, #16
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e062      	b.n	80039e0 <UART_SetConfig+0x390>
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <UART_SetConfig+0x344>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d157      	bne.n	80039d4 <UART_SetConfig+0x384>
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <UART_SetConfig+0x350>)
 8003926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003928:	23c0      	movs	r3, #192	; 0xc0
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4013      	ands	r3, r2
 800392e:	22c0      	movs	r2, #192	; 0xc0
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <UART_SetConfig+0x368>
 8003936:	22c0      	movs	r2, #192	; 0xc0
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	4293      	cmp	r3, r2
 800393c:	d843      	bhi.n	80039c6 <UART_SetConfig+0x376>
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	0092      	lsls	r2, r2, #2
 8003942:	4293      	cmp	r3, r2
 8003944:	d011      	beq.n	800396a <UART_SetConfig+0x31a>
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	0092      	lsls	r2, r2, #2
 800394a:	4293      	cmp	r3, r2
 800394c:	d83b      	bhi.n	80039c6 <UART_SetConfig+0x376>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <UART_SetConfig+0x30c>
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	0052      	lsls	r2, r2, #1
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <UART_SetConfig+0x328>
 800395a:	e034      	b.n	80039c6 <UART_SetConfig+0x376>
 800395c:	231b      	movs	r3, #27
 800395e:	2220      	movs	r2, #32
 8003960:	189b      	adds	r3, r3, r2
 8003962:	19db      	adds	r3, r3, r7
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e03a      	b.n	80039e0 <UART_SetConfig+0x390>
 800396a:	231b      	movs	r3, #27
 800396c:	2220      	movs	r2, #32
 800396e:	189b      	adds	r3, r3, r2
 8003970:	19db      	adds	r3, r3, r7
 8003972:	2202      	movs	r2, #2
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e033      	b.n	80039e0 <UART_SetConfig+0x390>
 8003978:	231b      	movs	r3, #27
 800397a:	2220      	movs	r2, #32
 800397c:	189b      	adds	r3, r3, r2
 800397e:	19db      	adds	r3, r3, r7
 8003980:	2204      	movs	r2, #4
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e02c      	b.n	80039e0 <UART_SetConfig+0x390>
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	cfff69f3 	.word	0xcfff69f3
 800398c:	ffffcfff 	.word	0xffffcfff
 8003990:	40008000 	.word	0x40008000
 8003994:	40008400 	.word	0x40008400
 8003998:	11fff4ff 	.word	0x11fff4ff
 800399c:	40013800 	.word	0x40013800
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40004400 	.word	0x40004400
 80039a8:	40004800 	.word	0x40004800
 80039ac:	40004c00 	.word	0x40004c00
 80039b0:	40005000 	.word	0x40005000
 80039b4:	40013c00 	.word	0x40013c00
 80039b8:	231b      	movs	r3, #27
 80039ba:	2220      	movs	r2, #32
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	19db      	adds	r3, r3, r7
 80039c0:	2208      	movs	r2, #8
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e00c      	b.n	80039e0 <UART_SetConfig+0x390>
 80039c6:	231b      	movs	r3, #27
 80039c8:	2220      	movs	r2, #32
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	19db      	adds	r3, r3, r7
 80039ce:	2210      	movs	r2, #16
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e005      	b.n	80039e0 <UART_SetConfig+0x390>
 80039d4:	231b      	movs	r3, #27
 80039d6:	2220      	movs	r2, #32
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	2210      	movs	r2, #16
 80039de:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4ac1      	ldr	r2, [pc, #772]	; (8003cec <UART_SetConfig+0x69c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d005      	beq.n	80039f6 <UART_SetConfig+0x3a6>
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4ac0      	ldr	r2, [pc, #768]	; (8003cf0 <UART_SetConfig+0x6a0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d000      	beq.n	80039f6 <UART_SetConfig+0x3a6>
 80039f4:	e093      	b.n	8003b1e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039f6:	231b      	movs	r3, #27
 80039f8:	2220      	movs	r2, #32
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	19db      	adds	r3, r3, r7
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d015      	beq.n	8003a30 <UART_SetConfig+0x3e0>
 8003a04:	dc18      	bgt.n	8003a38 <UART_SetConfig+0x3e8>
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d00d      	beq.n	8003a26 <UART_SetConfig+0x3d6>
 8003a0a:	dc15      	bgt.n	8003a38 <UART_SetConfig+0x3e8>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <UART_SetConfig+0x3c6>
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0x3d0>
 8003a14:	e010      	b.n	8003a38 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a16:	f7ff fae5 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a1e:	e014      	b.n	8003a4a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a20:	4bb4      	ldr	r3, [pc, #720]	; (8003cf4 <UART_SetConfig+0x6a4>)
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a24:	e011      	b.n	8003a4a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a26:	f7ff fa51 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a2e:	e00c      	b.n	8003a4a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a36:	e008      	b.n	8003a4a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a3c:	231a      	movs	r3, #26
 8003a3e:	2220      	movs	r2, #32
 8003a40:	189b      	adds	r3, r3, r2
 8003a42:	19db      	adds	r3, r3, r7
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
        break;
 8003a48:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d100      	bne.n	8003a52 <UART_SetConfig+0x402>
 8003a50:	e135      	b.n	8003cbe <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a56:	4ba8      	ldr	r3, [pc, #672]	; (8003cf8 <UART_SetConfig+0x6a8>)
 8003a58:	0052      	lsls	r2, r2, #1
 8003a5a:	5ad3      	ldrh	r3, [r2, r3]
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a60:	f7fc fb50 	bl	8000104 <__udivsi3>
 8003a64:	0003      	movs	r3, r0
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d305      	bcc.n	8003a84 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d906      	bls.n	8003a92 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003a84:	231a      	movs	r3, #26
 8003a86:	2220      	movs	r2, #32
 8003a88:	189b      	adds	r3, r3, r2
 8003a8a:	19db      	adds	r3, r3, r7
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e044      	b.n	8003b1c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a9e:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <UART_SetConfig+0x6a8>)
 8003aa0:	0052      	lsls	r2, r2, #1
 8003aa2:	5ad3      	ldrh	r3, [r2, r3]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	69b8      	ldr	r0, [r7, #24]
 8003ab0:	69f9      	ldr	r1, [r7, #28]
 8003ab2:	f7fc fc9d 	bl	80003f0 <__aeabi_uldivmod>
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	000b      	movs	r3, r1
 8003aba:	0e11      	lsrs	r1, r2, #24
 8003abc:	021d      	lsls	r5, r3, #8
 8003abe:	430d      	orrs	r5, r1
 8003ac0:	0214      	lsls	r4, r2, #8
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68b8      	ldr	r0, [r7, #8]
 8003ad0:	68f9      	ldr	r1, [r7, #12]
 8003ad2:	1900      	adds	r0, r0, r4
 8003ad4:	4169      	adcs	r1, r5
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	2300      	movs	r3, #0
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f7fc fc84 	bl	80003f0 <__aeabi_uldivmod>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	000b      	movs	r3, r1
 8003aec:	0013      	movs	r3, r2
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af2:	23c0      	movs	r3, #192	; 0xc0
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d309      	bcc.n	8003b0e <UART_SetConfig+0x4be>
 8003afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	035b      	lsls	r3, r3, #13
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d204      	bcs.n	8003b0e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e006      	b.n	8003b1c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003b0e:	231a      	movs	r3, #26
 8003b10:	2220      	movs	r2, #32
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	19db      	adds	r3, r3, r7
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003b1a:	e0d0      	b.n	8003cbe <UART_SetConfig+0x66e>
 8003b1c:	e0cf      	b.n	8003cbe <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d000      	beq.n	8003b2c <UART_SetConfig+0x4dc>
 8003b2a:	e070      	b.n	8003c0e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003b2c:	231b      	movs	r3, #27
 8003b2e:	2220      	movs	r2, #32
 8003b30:	189b      	adds	r3, r3, r2
 8003b32:	19db      	adds	r3, r3, r7
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d015      	beq.n	8003b66 <UART_SetConfig+0x516>
 8003b3a:	dc18      	bgt.n	8003b6e <UART_SetConfig+0x51e>
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d00d      	beq.n	8003b5c <UART_SetConfig+0x50c>
 8003b40:	dc15      	bgt.n	8003b6e <UART_SetConfig+0x51e>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <UART_SetConfig+0x4fc>
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d005      	beq.n	8003b56 <UART_SetConfig+0x506>
 8003b4a:	e010      	b.n	8003b6e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7ff fa4a 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8003b50:	0003      	movs	r3, r0
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b54:	e014      	b.n	8003b80 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <UART_SetConfig+0x6a4>)
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b5a:	e011      	b.n	8003b80 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5c:	f7ff f9b6 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8003b60:	0003      	movs	r3, r0
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b64:	e00c      	b.n	8003b80 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b6c:	e008      	b.n	8003b80 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b72:	231a      	movs	r3, #26
 8003b74:	2220      	movs	r2, #32
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	19db      	adds	r3, r3, r7
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
        break;
 8003b7e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d100      	bne.n	8003b88 <UART_SetConfig+0x538>
 8003b86:	e09a      	b.n	8003cbe <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b8c:	4b5a      	ldr	r3, [pc, #360]	; (8003cf8 <UART_SetConfig+0x6a8>)
 8003b8e:	0052      	lsls	r2, r2, #1
 8003b90:	5ad3      	ldrh	r3, [r2, r3]
 8003b92:	0019      	movs	r1, r3
 8003b94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b96:	f7fc fab5 	bl	8000104 <__udivsi3>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	005a      	lsls	r2, r3, #1
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	18d2      	adds	r2, r2, r3
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	0019      	movs	r1, r3
 8003bac:	0010      	movs	r0, r2
 8003bae:	f7fc faa9 	bl	8000104 <__udivsi3>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d921      	bls.n	8003c00 <UART_SetConfig+0x5b0>
 8003bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	025b      	lsls	r3, r3, #9
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d21c      	bcs.n	8003c00 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	200e      	movs	r0, #14
 8003bcc:	2420      	movs	r4, #32
 8003bce:	1903      	adds	r3, r0, r4
 8003bd0:	19db      	adds	r3, r3, r7
 8003bd2:	210f      	movs	r1, #15
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2207      	movs	r2, #7
 8003be0:	4013      	ands	r3, r2
 8003be2:	b299      	uxth	r1, r3
 8003be4:	1903      	adds	r3, r0, r4
 8003be6:	19db      	adds	r3, r3, r7
 8003be8:	1902      	adds	r2, r0, r4
 8003bea:	19d2      	adds	r2, r2, r7
 8003bec:	8812      	ldrh	r2, [r2, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1902      	adds	r2, r0, r4
 8003bf8:	19d2      	adds	r2, r2, r7
 8003bfa:	8812      	ldrh	r2, [r2, #0]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	e05e      	b.n	8003cbe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003c00:	231a      	movs	r3, #26
 8003c02:	2220      	movs	r2, #32
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	19db      	adds	r3, r3, r7
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e057      	b.n	8003cbe <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0e:	231b      	movs	r3, #27
 8003c10:	2220      	movs	r2, #32
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	19db      	adds	r3, r3, r7
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d015      	beq.n	8003c48 <UART_SetConfig+0x5f8>
 8003c1c:	dc18      	bgt.n	8003c50 <UART_SetConfig+0x600>
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00d      	beq.n	8003c3e <UART_SetConfig+0x5ee>
 8003c22:	dc15      	bgt.n	8003c50 <UART_SetConfig+0x600>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <UART_SetConfig+0x5de>
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d005      	beq.n	8003c38 <UART_SetConfig+0x5e8>
 8003c2c:	e010      	b.n	8003c50 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c2e:	f7ff f9d9 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8003c32:	0003      	movs	r3, r0
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c36:	e014      	b.n	8003c62 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c38:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <UART_SetConfig+0x6a4>)
 8003c3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c3c:	e011      	b.n	8003c62 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c3e:	f7ff f945 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8003c42:	0003      	movs	r3, r0
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c46:	e00c      	b.n	8003c62 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c4e:	e008      	b.n	8003c62 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003c54:	231a      	movs	r3, #26
 8003c56:	2220      	movs	r2, #32
 8003c58:	189b      	adds	r3, r3, r2
 8003c5a:	19db      	adds	r3, r3, r7
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
        break;
 8003c60:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d02a      	beq.n	8003cbe <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6c:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <UART_SetConfig+0x6a8>)
 8003c6e:	0052      	lsls	r2, r2, #1
 8003c70:	5ad3      	ldrh	r3, [r2, r3]
 8003c72:	0019      	movs	r1, r3
 8003c74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c76:	f7fc fa45 	bl	8000104 <__udivsi3>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	18d2      	adds	r2, r2, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	0010      	movs	r0, r2
 8003c8e:	f7fc fa39 	bl	8000104 <__udivsi3>
 8003c92:	0003      	movs	r3, r0
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	d90a      	bls.n	8003cb2 <UART_SetConfig+0x662>
 8003c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	025b      	lsls	r3, r3, #9
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d205      	bcs.n	8003cb2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	e005      	b.n	8003cbe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb2:	231a      	movs	r3, #26
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	19db      	adds	r3, r3, r7
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	226a      	movs	r2, #106	; 0x6a
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	2268      	movs	r2, #104	; 0x68
 8003cca:	2101      	movs	r1, #1
 8003ccc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003cda:	231a      	movs	r3, #26
 8003cdc:	2220      	movs	r2, #32
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	19db      	adds	r3, r3, r7
 8003ce2:	781b      	ldrb	r3, [r3, #0]
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b010      	add	sp, #64	; 0x40
 8003cea:	bdb0      	pop	{r4, r5, r7, pc}
 8003cec:	40008000 	.word	0x40008000
 8003cf0:	40008400 	.word	0x40008400
 8003cf4:	00f42400 	.word	0x00f42400
 8003cf8:	080048fc 	.word	0x080048fc

08003cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <UART_AdvFeatureConfig+0x144>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a43      	ldr	r2, [pc, #268]	; (8003e44 <UART_AdvFeatureConfig+0x148>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a3b      	ldr	r2, [pc, #236]	; (8003e48 <UART_AdvFeatureConfig+0x14c>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	2208      	movs	r2, #8
 8003d70:	4013      	ands	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <UART_AdvFeatureConfig+0x150>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	2210      	movs	r2, #16
 8003d92:	4013      	ands	r3, r2
 8003d94:	d00b      	beq.n	8003dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a2c      	ldr	r2, [pc, #176]	; (8003e50 <UART_AdvFeatureConfig+0x154>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	2220      	movs	r2, #32
 8003db4:	4013      	ands	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <UART_AdvFeatureConfig+0x158>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	2240      	movs	r2, #64	; 0x40
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d01d      	beq.n	8003e16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <UART_AdvFeatureConfig+0x15c>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	035b      	lsls	r3, r3, #13
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d10b      	bne.n	8003e16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <UART_AdvFeatureConfig+0x160>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <UART_AdvFeatureConfig+0x164>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
  }
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	fffdffff 	.word	0xfffdffff
 8003e44:	fffeffff 	.word	0xfffeffff
 8003e48:	fffbffff 	.word	0xfffbffff
 8003e4c:	ffff7fff 	.word	0xffff7fff
 8003e50:	ffffefff 	.word	0xffffefff
 8003e54:	ffffdfff 	.word	0xffffdfff
 8003e58:	ffefffff 	.word	0xffefffff
 8003e5c:	ff9fffff 	.word	0xff9fffff
 8003e60:	fff7ffff 	.word	0xfff7ffff

08003e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2290      	movs	r2, #144	; 0x90
 8003e70:	2100      	movs	r1, #0
 8003e72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e74:	f7fd fe46 	bl	8001b04 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2208      	movs	r2, #8
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d10c      	bne.n	8003ea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	0391      	lsls	r1, r2, #14
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <UART_CheckIdleState+0x98>)
 8003e94:	9200      	str	r2, [sp, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f000 f832 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003e9c:	1e03      	subs	r3, r0, #0
 8003e9e:	d001      	beq.n	8003ea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e026      	b.n	8003ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d10c      	bne.n	8003ecc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	03d1      	lsls	r1, r2, #15
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4a10      	ldr	r2, [pc, #64]	; (8003efc <UART_CheckIdleState+0x98>)
 8003ebc:	9200      	str	r2, [sp, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f000 f81e 	bl	8003f00 <UART_WaitOnFlagUntilTimeout>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d001      	beq.n	8003ecc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e012      	b.n	8003ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2288      	movs	r2, #136	; 0x88
 8003ed0:	2120      	movs	r1, #32
 8003ed2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	228c      	movs	r2, #140	; 0x8c
 8003ed8:	2120      	movs	r1, #32
 8003eda:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2284      	movs	r2, #132	; 0x84
 8003eec:	2100      	movs	r1, #0
 8003eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	01ffffff 	.word	0x01ffffff

08003f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b094      	sub	sp, #80	; 0x50
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	1dfb      	adds	r3, r7, #7
 8003f0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f10:	e0a7      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f14:	3301      	adds	r3, #1
 8003f16:	d100      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003f18:	e0a3      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fd fdf3 	bl	8001b04 <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13f      	bne.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f30:	f3ef 8310 	mrs	r3, PRIMASK
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	494e      	ldr	r1, [pc, #312]	; (800408c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f58:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	f383 8810 	msr	PRIMASK, r3
}
 8003f60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f62:	f3ef 8310 	mrs	r3, PRIMASK
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	f383 8810 	msr	PRIMASK, r3
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	438a      	bics	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2288      	movs	r2, #136	; 0x88
 8003f98:	2120      	movs	r1, #32
 8003f9a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	228c      	movs	r2, #140	; 0x8c
 8003fa0:	2120      	movs	r1, #32
 8003fa2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2284      	movs	r2, #132	; 0x84
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e069      	b.n	8004084 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d052      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d148      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	0112      	lsls	r2, r2, #4
 8003fd8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fda:	f3ef 8310 	mrs	r3, PRIMASK
 8003fde:	613b      	str	r3, [r7, #16]
  return(result);
 8003fe0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f383 8810 	msr	PRIMASK, r3
}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4924      	ldr	r1, [pc, #144]	; (800408c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004002:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400c:	f3ef 8310 	mrs	r3, PRIMASK
 8004010:	61fb      	str	r3, [r7, #28]
  return(result);
 8004012:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	64bb      	str	r3, [r7, #72]	; 0x48
 8004016:	2301      	movs	r3, #1
 8004018:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	438a      	bics	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2288      	movs	r2, #136	; 0x88
 8004042:	2120      	movs	r1, #32
 8004044:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	228c      	movs	r2, #140	; 0x8c
 800404a:	2120      	movs	r1, #32
 800404c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2290      	movs	r2, #144	; 0x90
 8004052:	2120      	movs	r1, #32
 8004054:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2284      	movs	r2, #132	; 0x84
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e010      	b.n	8004084 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	425a      	negs	r2, r3
 8004072:	4153      	adcs	r3, r2
 8004074:	b2db      	uxtb	r3, r3
 8004076:	001a      	movs	r2, r3
 8004078:	1dfb      	adds	r3, r7, #7
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d100      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0x182>
 8004080:	e747      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b014      	add	sp, #80	; 0x50
 800408a:	bd80      	pop	{r7, pc}
 800408c:	fffffe5f 	.word	0xfffffe5f

08004090 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2284      	movs	r2, #132	; 0x84
 800409c:	5c9b      	ldrb	r3, [r3, r2]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e027      	b.n	80040f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2284      	movs	r2, #132	; 0x84
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2288      	movs	r2, #136	; 0x88
 80040b2:	2124      	movs	r1, #36	; 0x24
 80040b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	438a      	bics	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <HAL_UARTEx_DisableFifoMode+0x70>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2288      	movs	r2, #136	; 0x88
 80040e8:	2120      	movs	r1, #32
 80040ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2284      	movs	r2, #132	; 0x84
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	dfffffff 	.word	0xdfffffff

08004104 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2284      	movs	r2, #132	; 0x84
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004118:	2302      	movs	r3, #2
 800411a:	e02e      	b.n	800417a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2284      	movs	r2, #132	; 0x84
 8004120:	2101      	movs	r1, #1
 8004122:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2288      	movs	r2, #136	; 0x88
 8004128:	2124      	movs	r1, #36	; 0x24
 800412a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2101      	movs	r1, #1
 8004140:	438a      	bics	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	08d9      	lsrs	r1, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	0018      	movs	r0, r3
 800415c:	f000 f854 	bl	8004208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2288      	movs	r2, #136	; 0x88
 800416c:	2120      	movs	r1, #32
 800416e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2284      	movs	r2, #132	; 0x84
 8004174:	2100      	movs	r1, #0
 8004176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b004      	add	sp, #16
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2284      	movs	r2, #132	; 0x84
 8004192:	5c9b      	ldrb	r3, [r3, r2]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004198:	2302      	movs	r3, #2
 800419a:	e02f      	b.n	80041fc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2284      	movs	r2, #132	; 0x84
 80041a0:	2101      	movs	r1, #1
 80041a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2288      	movs	r2, #136	; 0x88
 80041a8:	2124      	movs	r1, #36	; 0x24
 80041aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2101      	movs	r1, #1
 80041c0:	438a      	bics	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	0018      	movs	r0, r3
 80041de:	f000 f813 	bl	8004208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2288      	movs	r2, #136	; 0x88
 80041ee:	2120      	movs	r1, #32
 80041f0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2284      	movs	r2, #132	; 0x84
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b004      	add	sp, #16
 8004202:	bd80      	pop	{r7, pc}
 8004204:	f1ffffff 	.word	0xf1ffffff

08004208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004214:	2b00      	cmp	r3, #0
 8004216:	d108      	bne.n	800422a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	226a      	movs	r2, #106	; 0x6a
 800421c:	2101      	movs	r1, #1
 800421e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2268      	movs	r2, #104	; 0x68
 8004224:	2101      	movs	r1, #1
 8004226:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004228:	e043      	b.n	80042b2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800422a:	260f      	movs	r6, #15
 800422c:	19bb      	adds	r3, r7, r6
 800422e:	2208      	movs	r2, #8
 8004230:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004232:	200e      	movs	r0, #14
 8004234:	183b      	adds	r3, r7, r0
 8004236:	2208      	movs	r2, #8
 8004238:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	0e5b      	lsrs	r3, r3, #25
 8004242:	b2da      	uxtb	r2, r3
 8004244:	240d      	movs	r4, #13
 8004246:	193b      	adds	r3, r7, r4
 8004248:	2107      	movs	r1, #7
 800424a:	400a      	ands	r2, r1
 800424c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	0f5b      	lsrs	r3, r3, #29
 8004256:	b2da      	uxtb	r2, r3
 8004258:	250c      	movs	r5, #12
 800425a:	197b      	adds	r3, r7, r5
 800425c:	2107      	movs	r1, #7
 800425e:	400a      	ands	r2, r1
 8004260:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004262:	183b      	adds	r3, r7, r0
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	197a      	adds	r2, r7, r5
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	4914      	ldr	r1, [pc, #80]	; (80042bc <UARTEx_SetNbDataToProcess+0xb4>)
 800426c:	5c8a      	ldrb	r2, [r1, r2]
 800426e:	435a      	muls	r2, r3
 8004270:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004272:	197b      	adds	r3, r7, r5
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4a12      	ldr	r2, [pc, #72]	; (80042c0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800427a:	0019      	movs	r1, r3
 800427c:	f7fb ffcc 	bl	8000218 <__divsi3>
 8004280:	0003      	movs	r3, r0
 8004282:	b299      	uxth	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	226a      	movs	r2, #106	; 0x6a
 8004288:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800428a:	19bb      	adds	r3, r7, r6
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	193a      	adds	r2, r7, r4
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	490a      	ldr	r1, [pc, #40]	; (80042bc <UARTEx_SetNbDataToProcess+0xb4>)
 8004294:	5c8a      	ldrb	r2, [r1, r2]
 8004296:	435a      	muls	r2, r3
 8004298:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800429a:	193b      	adds	r3, r7, r4
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <UARTEx_SetNbDataToProcess+0xb8>)
 80042a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042a2:	0019      	movs	r1, r3
 80042a4:	f7fb ffb8 	bl	8000218 <__divsi3>
 80042a8:	0003      	movs	r3, r0
 80042aa:	b299      	uxth	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2268      	movs	r2, #104	; 0x68
 80042b0:	5299      	strh	r1, [r3, r2]
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b005      	add	sp, #20
 80042b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	08004914 	.word	0x08004914
 80042c0:	0800491c 	.word	0x0800491c

080042c4 <LL_EXTI_EnableIT_0_31>:
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80042cc:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	58d2      	ldr	r2, [r2, r3]
 80042d2:	4904      	ldr	r1, [pc, #16]	; (80042e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	508b      	str	r3, [r1, r2]
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021800 	.word	0x40021800

080042e8 <LL_EXTI_EnableIT_32_63>:
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80042f0:	4a05      	ldr	r2, [pc, #20]	; (8004308 <LL_EXTI_EnableIT_32_63+0x20>)
 80042f2:	2390      	movs	r3, #144	; 0x90
 80042f4:	58d2      	ldr	r2, [r2, r3]
 80042f6:	4904      	ldr	r1, [pc, #16]	; (8004308 <LL_EXTI_EnableIT_32_63+0x20>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	2290      	movs	r2, #144	; 0x90
 80042fe:	508b      	str	r3, [r1, r2]
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021800 	.word	0x40021800

0800430c <LL_EXTI_DisableIT_0_31>:
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004314:	4a06      	ldr	r2, [pc, #24]	; (8004330 <LL_EXTI_DisableIT_0_31+0x24>)
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	58d3      	ldr	r3, [r2, r3]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	43d2      	mvns	r2, r2
 800431e:	4904      	ldr	r1, [pc, #16]	; (8004330 <LL_EXTI_DisableIT_0_31+0x24>)
 8004320:	4013      	ands	r3, r2
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	508b      	str	r3, [r1, r2]
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	b002      	add	sp, #8
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	40021800 	.word	0x40021800

08004334 <LL_EXTI_DisableIT_32_63>:
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800433c:	4a06      	ldr	r2, [pc, #24]	; (8004358 <LL_EXTI_DisableIT_32_63+0x24>)
 800433e:	2390      	movs	r3, #144	; 0x90
 8004340:	58d3      	ldr	r3, [r2, r3]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	43d2      	mvns	r2, r2
 8004346:	4904      	ldr	r1, [pc, #16]	; (8004358 <LL_EXTI_DisableIT_32_63+0x24>)
 8004348:	4013      	ands	r3, r2
 800434a:	2290      	movs	r2, #144	; 0x90
 800434c:	508b      	str	r3, [r1, r2]
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	40021800 	.word	0x40021800

0800435c <LL_EXTI_EnableEvent_0_31>:
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004364:	4a05      	ldr	r2, [pc, #20]	; (800437c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004366:	2384      	movs	r3, #132	; 0x84
 8004368:	58d2      	ldr	r2, [r2, r3]
 800436a:	4904      	ldr	r1, [pc, #16]	; (800437c <LL_EXTI_EnableEvent_0_31+0x20>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4313      	orrs	r3, r2
 8004370:	2284      	movs	r2, #132	; 0x84
 8004372:	508b      	str	r3, [r1, r2]
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021800 	.word	0x40021800

08004380 <LL_EXTI_EnableEvent_32_63>:
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004388:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800438a:	2394      	movs	r3, #148	; 0x94
 800438c:	58d2      	ldr	r2, [r2, r3]
 800438e:	4904      	ldr	r1, [pc, #16]	; (80043a0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4313      	orrs	r3, r2
 8004394:	2294      	movs	r2, #148	; 0x94
 8004396:	508b      	str	r3, [r1, r2]
}
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b002      	add	sp, #8
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021800 	.word	0x40021800

080043a4 <LL_EXTI_DisableEvent_0_31>:
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80043ac:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80043ae:	2384      	movs	r3, #132	; 0x84
 80043b0:	58d3      	ldr	r3, [r2, r3]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	43d2      	mvns	r2, r2
 80043b6:	4904      	ldr	r1, [pc, #16]	; (80043c8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	2284      	movs	r2, #132	; 0x84
 80043bc:	508b      	str	r3, [r1, r2]
}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b002      	add	sp, #8
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	40021800 	.word	0x40021800

080043cc <LL_EXTI_DisableEvent_32_63>:
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80043d4:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80043d6:	2394      	movs	r3, #148	; 0x94
 80043d8:	58d3      	ldr	r3, [r2, r3]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	43d2      	mvns	r2, r2
 80043de:	4904      	ldr	r1, [pc, #16]	; (80043f0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	2294      	movs	r2, #148	; 0x94
 80043e4:	508b      	str	r3, [r1, r2]
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	40021800 	.word	0x40021800

080043f4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	b002      	add	sp, #8
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021800 	.word	0x40021800

08004414 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	43d9      	mvns	r1, r3
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004426:	400a      	ands	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	46bd      	mov	sp, r7
 800442e:	b002      	add	sp, #8
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	40021800 	.word	0x40021800

08004438 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004442:	6859      	ldr	r1, [r3, #4]
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021800 	.word	0x40021800

08004458 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	43d9      	mvns	r1, r3
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800446a:	400a      	ands	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	40021800 	.word	0x40021800

0800447c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7a1b      	ldrb	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d100      	bne.n	8004492 <LL_EXTI_Init+0x16>
 8004490:	e09a      	b.n	80045c8 <LL_EXTI_Init+0x14c>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d061      	beq.n	800455e <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7a5b      	ldrb	r3, [r3, #9]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d01b      	beq.n	80044da <LL_EXTI_Init+0x5e>
 80044a2:	dc25      	bgt.n	80044f0 <LL_EXTI_Init+0x74>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <LL_EXTI_Init+0x32>
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d00b      	beq.n	80044c4 <LL_EXTI_Init+0x48>
 80044ac:	e020      	b.n	80044f0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f7ff ff76 	bl	80043a4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0018      	movs	r0, r3
 80044be:	f7ff ff01 	bl	80042c4 <LL_EXTI_EnableIT_0_31>
          break;
 80044c2:	e018      	b.n	80044f6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7ff ff1f 	bl	800430c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7ff ff42 	bl	800435c <LL_EXTI_EnableEvent_0_31>
          break;
 80044d8:	e00d      	b.n	80044f6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	0018      	movs	r0, r3
 80044e0:	f7ff fef0 	bl	80042c4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7ff ff37 	bl	800435c <LL_EXTI_EnableEvent_0_31>
          break;
 80044ee:	e002      	b.n	80044f6 <LL_EXTI_Init+0x7a>
        default:
          status = 0x01u;
 80044f0:	2301      	movs	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
          break;
 80044f4:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	7a9b      	ldrb	r3, [r3, #10]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02f      	beq.n	800455e <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	7a9b      	ldrb	r3, [r3, #10]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d01b      	beq.n	800453e <LL_EXTI_Init+0xc2>
 8004506:	dc25      	bgt.n	8004554 <LL_EXTI_Init+0xd8>
 8004508:	2b01      	cmp	r3, #1
 800450a:	d002      	beq.n	8004512 <LL_EXTI_Init+0x96>
 800450c:	2b02      	cmp	r3, #2
 800450e:	d00b      	beq.n	8004528 <LL_EXTI_Init+0xac>
 8004510:	e020      	b.n	8004554 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0018      	movs	r0, r3
 8004518:	f7ff ff9e 	bl	8004458 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0018      	movs	r0, r3
 8004522:	f7ff ff67 	bl	80043f4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004526:	e01b      	b.n	8004560 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	0018      	movs	r0, r3
 800452e:	f7ff ff71 	bl	8004414 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0018      	movs	r0, r3
 8004538:	f7ff ff7e 	bl	8004438 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800453c:	e010      	b.n	8004560 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0018      	movs	r0, r3
 8004544:	f7ff ff56 	bl	80043f4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff ff73 	bl	8004438 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004552:	e005      	b.n	8004560 <LL_EXTI_Init+0xe4>
          default:
            status |= 0x02u;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2202      	movs	r2, #2
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
            break;
 800455c:	e000      	b.n	8004560 <LL_EXTI_Init+0xe4>
        }
      }
 800455e:	46c0      	nop			; (mov r8, r8)
    }
#if defined(STM32G081xx) || defined(STM32G071xx) || defined(STM32G0C1xx) || defined(STM32G0B1xx) || defined(STM32G0B0xx)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d044      	beq.n	80045f2 <LL_EXTI_Init+0x176>
    {
      switch (EXTI_InitStruct->Mode)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	7a5b      	ldrb	r3, [r3, #9]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d01b      	beq.n	80045a8 <LL_EXTI_Init+0x12c>
 8004570:	dc25      	bgt.n	80045be <LL_EXTI_Init+0x142>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <LL_EXTI_Init+0x100>
 8004576:	2b01      	cmp	r3, #1
 8004578:	d00b      	beq.n	8004592 <LL_EXTI_Init+0x116>
 800457a:	e020      	b.n	80045be <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff ff23 	bl	80043cc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff feac 	bl	80042e8 <LL_EXTI_EnableIT_32_63>
          break;
 8004590:	e030      	b.n	80045f4 <LL_EXTI_Init+0x178>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	0018      	movs	r0, r3
 8004598:	f7ff fecc 	bl	8004334 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7ff feed 	bl	8004380 <LL_EXTI_EnableEvent_32_63>
          break;
 80045a6:	e025      	b.n	80045f4 <LL_EXTI_Init+0x178>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7ff fe9b 	bl	80042e8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7ff fee2 	bl	8004380 <LL_EXTI_EnableEvent_32_63>
          break;
 80045bc:	e01a      	b.n	80045f4 <LL_EXTI_Init+0x178>
        default:
          status |= 0x04u;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2204      	movs	r2, #4
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
          break;
 80045c6:	e015      	b.n	80045f4 <LL_EXTI_Init+0x178>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff fe9d 	bl	800430c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0018      	movs	r0, r3
 80045d8:	f7ff fee4 	bl	80043a4 <LL_EXTI_DisableEvent_0_31>
#if defined(STM32G081xx) || defined(STM32G071xx) || defined(STM32G0C1xx) || defined(STM32G0B1xx) || defined(STM32G0B0xx)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff fea7 	bl	8004334 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f7ff feee 	bl	80043cc <LL_EXTI_DisableEvent_32_63>
 80045f0:	e000      	b.n	80045f4 <LL_EXTI_Init+0x178>
    }
 80045f2:	46c0      	nop			; (mov r8, r8)
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  }

  return status;
 80045f4:	68fb      	ldr	r3, [r7, #12]
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}

080045fe <LL_GPIO_SetPinMode>:
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	435b      	muls	r3, r3
 8004612:	001a      	movs	r2, r3
 8004614:	0013      	movs	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	189b      	adds	r3, r3, r2
 800461a:	43db      	mvns	r3, r3
 800461c:	400b      	ands	r3, r1
 800461e:	001a      	movs	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	435b      	muls	r3, r3
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	434b      	muls	r3, r1
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	601a      	str	r2, [r3, #0]
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b004      	add	sp, #16
 8004634:	bd80      	pop	{r7, pc}

08004636 <LL_GPIO_SetPinOutputType>:
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	43d2      	mvns	r2, r2
 800464a:	401a      	ands	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	434b      	muls	r3, r1
 8004652:	431a      	orrs	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	605a      	str	r2, [r3, #4]
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b004      	add	sp, #16
 800465e:	bd80      	pop	{r7, pc}

08004660 <LL_GPIO_SetPinSpeed>:
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6899      	ldr	r1, [r3, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	435b      	muls	r3, r3
 8004674:	001a      	movs	r2, r3
 8004676:	0013      	movs	r3, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	189b      	adds	r3, r3, r2
 800467c:	43db      	mvns	r3, r3
 800467e:	400b      	ands	r3, r1
 8004680:	001a      	movs	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	435b      	muls	r3, r3
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	434b      	muls	r3, r1
 800468a:	431a      	orrs	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b004      	add	sp, #16
 8004696:	bd80      	pop	{r7, pc}

08004698 <LL_GPIO_SetPinPull>:
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68d9      	ldr	r1, [r3, #12]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	435b      	muls	r3, r3
 80046ac:	001a      	movs	r2, r3
 80046ae:	0013      	movs	r3, r2
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	43db      	mvns	r3, r3
 80046b6:	400b      	ands	r3, r1
 80046b8:	001a      	movs	r2, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	435b      	muls	r3, r3
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	434b      	muls	r3, r1
 80046c2:	431a      	orrs	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	60da      	str	r2, [r3, #12]
}
 80046c8:	46c0      	nop			; (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b004      	add	sp, #16
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <LL_GPIO_SetAFPin_0_7>:
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a19      	ldr	r1, [r3, #32]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	435b      	muls	r3, r3
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4353      	muls	r3, r2
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	435a      	muls	r2, r3
 80046ec:	0013      	movs	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	43db      	mvns	r3, r3
 80046f4:	400b      	ands	r3, r1
 80046f6:	001a      	movs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	435b      	muls	r3, r3
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	434b      	muls	r3, r1
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	434b      	muls	r3, r1
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	434b      	muls	r3, r1
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}

08004716 <LL_GPIO_SetAFPin_8_15>:
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	0a12      	lsrs	r2, r2, #8
 800472e:	4353      	muls	r3, r2
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	0a12      	lsrs	r2, r2, #8
 8004734:	4353      	muls	r3, r2
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	0a12      	lsrs	r2, r2, #8
 800473a:	435a      	muls	r2, r3
 800473c:	0013      	movs	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	43db      	mvns	r3, r3
 8004744:	400b      	ands	r3, r1
 8004746:	001a      	movs	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	0a09      	lsrs	r1, r1, #8
 8004750:	434b      	muls	r3, r1
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	0a09      	lsrs	r1, r1, #8
 8004756:	434b      	muls	r3, r1
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	0a09      	lsrs	r1, r1, #8
 800475c:	434b      	muls	r3, r1
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	434b      	muls	r3, r1
 8004762:	431a      	orrs	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b004      	add	sp, #16
 800476e:	bd80      	pop	{r7, pc}

08004770 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800477e:	e047      	b.n	8004810 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4091      	lsls	r1, r2
 800478a:	000a      	movs	r2, r1
 800478c:	4013      	ands	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d039      	beq.n	800480a <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d003      	beq.n	80047a6 <LL_GPIO_Init+0x36>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d10d      	bne.n	80047c2 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff ff56 	bl	8004660 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff ff3a 	bl	8004636 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7ff ff64 	bl	8004698 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d111      	bne.n	80047fc <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2bff      	cmp	r3, #255	; 0xff
 80047dc:	d807      	bhi.n	80047ee <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7ff ff72 	bl	80046d0 <LL_GPIO_SetAFPin_0_7>
 80047ec:	e006      	b.n	80047fc <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff ff8d 	bl	8004716 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0018      	movs	r0, r3
 8004806:	f7ff fefa 	bl	80045fe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	40da      	lsrs	r2, r3
 8004818:	1e13      	subs	r3, r2, #0
 800481a:	d1b1      	bne.n	8004780 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <LL_SetSystemCoreClock+0x18>)
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20000000 	.word	0x20000000

08004844 <__libc_init_array>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	2600      	movs	r6, #0
 8004848:	4d0c      	ldr	r5, [pc, #48]	; (800487c <__libc_init_array+0x38>)
 800484a:	4c0d      	ldr	r4, [pc, #52]	; (8004880 <__libc_init_array+0x3c>)
 800484c:	1b64      	subs	r4, r4, r5
 800484e:	10a4      	asrs	r4, r4, #2
 8004850:	42a6      	cmp	r6, r4
 8004852:	d109      	bne.n	8004868 <__libc_init_array+0x24>
 8004854:	2600      	movs	r6, #0
 8004856:	f000 f821 	bl	800489c <_init>
 800485a:	4d0a      	ldr	r5, [pc, #40]	; (8004884 <__libc_init_array+0x40>)
 800485c:	4c0a      	ldr	r4, [pc, #40]	; (8004888 <__libc_init_array+0x44>)
 800485e:	1b64      	subs	r4, r4, r5
 8004860:	10a4      	asrs	r4, r4, #2
 8004862:	42a6      	cmp	r6, r4
 8004864:	d105      	bne.n	8004872 <__libc_init_array+0x2e>
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	00b3      	lsls	r3, r6, #2
 800486a:	58eb      	ldr	r3, [r5, r3]
 800486c:	4798      	blx	r3
 800486e:	3601      	adds	r6, #1
 8004870:	e7ee      	b.n	8004850 <__libc_init_array+0xc>
 8004872:	00b3      	lsls	r3, r6, #2
 8004874:	58eb      	ldr	r3, [r5, r3]
 8004876:	4798      	blx	r3
 8004878:	3601      	adds	r6, #1
 800487a:	e7f2      	b.n	8004862 <__libc_init_array+0x1e>
 800487c:	0800492c 	.word	0x0800492c
 8004880:	0800492c 	.word	0x0800492c
 8004884:	0800492c 	.word	0x0800492c
 8004888:	08004930 	.word	0x08004930

0800488c <memset>:
 800488c:	0003      	movs	r3, r0
 800488e:	1882      	adds	r2, r0, r2
 8004890:	4293      	cmp	r3, r2
 8004892:	d100      	bne.n	8004896 <memset+0xa>
 8004894:	4770      	bx	lr
 8004896:	7019      	strb	r1, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	e7f9      	b.n	8004890 <memset+0x4>

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
